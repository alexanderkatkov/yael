{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["/**\r\n * Yael functions and definitions.\r\n */\r\n\r\n( function( $ ) {\r\n    \"use strict\";\r\n\r\n    $( function() {\r\n\r\n        // Modal\r\n        /**\r\n         * Search Modal\r\n         */\r\n        $( \".bdbg-js-search\" ).on( \"click\", function() {\r\n            $( \".bdbg-overlay\" ).addClass( \"bdbg-overlay--visible\" );\r\n            $( \"#search-big\" ).focus();\r\n        } );\r\n        \r\n        $( \".bdbg-overlay__button--close\" ).on( \"click\", function() {\r\n            $( \".bdbg-overlay\" ).removeClass( \"bdbg-overlay--visible\" );\r\n        } );\r\n        \r\n        $( \"#search-big\" ).on( \"keypress\", function( event ) {\r\n            if ( 13 === event.keyCode ) {\r\n                let modalHeading = $( \".bdbg-modal__heading\" );\r\n                let count = 0;\r\n        \r\n                modalHeading.html( modalHeading.data( \"textsearch\" ) );\r\n                setInterval( function() {\r\n                    if ( 0 === count ) {\r\n                        modalHeading.html( modalHeading.data( \"textsearch\" ) );\r\n                        count++;\r\n                    } else if ( 2 === count ) {\r\n                        count = 0;\r\n                    } else {\r\n                        count++;\r\n                    }\r\n                    modalHeading.append( \".\" );\r\n                }, 500 );\r\n            }\r\n        } );\r\n        // Grid Height Plugin\r\n        /*!\r\n         * Budabuga Grid Height Plugin\r\n         * Original author: @alexander.katkov\r\n         * Further changes, comments: @alexander.katkov\r\n         * Licensed under the MIT license\r\n         */\r\n        \r\n        ;( function( $, window, document, undefined ) {\r\n        \r\n            // Create the defaults.\r\n            var pluginName = \"bdbgGridHeight\",\r\n                defaults = {\r\n                    elementSelector: \".gh-element\"\r\n                };\r\n        \r\n            // Plugin constructor.\r\n            function Plugin( element, options ) {\r\n        \t\tthis.element = element;\r\n        \r\n                this.options = $.extend( {}, defaults, options ) ;\r\n        \r\n                this._defaults = defaults;\r\n                this._name = pluginName;\r\n        \r\n                this.init();\r\n            }\r\n        \r\n            Plugin.prototype = {\r\n        \r\n        \t\t// Constructor.\r\n                init: function() {\r\n        \r\n                    // Height reset\r\n                    this.maxHeight = 0;\r\n        \r\n        \t\t\t// Build elements cache.\r\n        \t\t\tthis.buildCache();\r\n        \r\n        \t\t\t// Calling event builder, no preparation needed.\r\n        \t\t\tthis.bindEvents();\r\n                },\r\n        \r\n        \t\tbindEvents: function() {\r\n        \r\n                    // Caching this.\r\n                    var self = this;\r\n        \r\n                    $( window )\r\n        \r\n                        // Initial resize, after page completly loads.\r\n                        .on( \"load\", function() {\r\n                            self.doResize( self );\r\n                        } )\r\n        \r\n                        // Every time screen size changes resize.\r\n                        .on( \"resize\", function() {\r\n                            self.doResize( self );\r\n                        } );\r\n        \r\n        \t\t},\r\n        \r\n        \t\tbuildCache: function() {\r\n        \r\n        \t\t\t// Caching base lements.\r\n        \t\t\t// this.$this = $( this );\r\n        \t\t},\r\n        \r\n                doResize: function( self ) {\r\n        \r\n                    $( self.element ).each( function() {\r\n                        $( this ).find( self.options.elementSelector ).css( \"height\", \"auto\" );\r\n                        if ( 1024 >= $( window ).width() ) {\r\n                            return false;\r\n                        }\r\n                        $( this ).find( self.options.elementSelector )\r\n                            .each( function() {\r\n                                self.maxHeight = ( $( this ).outerHeight() > self.maxHeight ) ?\r\n                                    $( this ).outerHeight() : self.maxHeight;\r\n                            } );\r\n        \r\n                            if ( self.maxHeight !== 0 ) {\r\n                                $( this ).find( self.options.elementSelector )\r\n                                    .outerHeight( self.maxHeight );\r\n                                self.maxHeight = 0;\r\n                            }\r\n                             self.maxHeight = 0;\r\n                    } );\r\n                }\r\n            };\r\n        \r\n            // A really lightweight plugin wrapper around the constructor,\r\n            // preventing against multiple instantiations.\r\n            $.fn[ pluginName ] = function( options ) {\r\n        \t\treturn this.each( function() {\r\n        \t\t\tif ( !$.data( this, \"plugin_\" + pluginName ) ) {\r\n        \t\t\t\t$.data( this, \"plugin_\" +\r\n        \t\t\t\t\tpluginName, new Plugin( this, options ) );\r\n        \t\t\t}\r\n        \t\t} );\r\n        \t};\r\n        \r\n        } )( jQuery, window, document );\r\n\r\n        $( \".bdbg-row-set\" )\r\n            .bdbgGridHeight( {\r\n                elementSelector: \".type-post .card-content\"\r\n            } )\r\n            .bdbgGridHeight( {\r\n                elementSelector: \".type-post .card-image\"\r\n            } );\r\n\r\n        $( \".page\" )\r\n            .bdbgGridHeight( {\r\n                elementSelector: \".bdbg-page--item\"\r\n            } );\r\n\r\n        // Sidemenu data caching.\r\n        let menuSide = $( \".button-collapse\" ).data( \"menuside\" );\r\n\r\n        // Main menu dropdown initialization\r\n        $( \".button-collapse\" )\r\n            .sideNav( {\r\n                menuWidth: 300, // Default is 240.\r\n                edge: menuSide,\r\n                closeOnClick: true // Closes side-nav on <a> clicks.\r\n            }\r\n        );\r\n\r\n        // Side menu dropdown initialization.\r\n        $( \".collapsible\" ).collapsible( {\r\n            /**\r\n             * A setting that changes the collapsible behavior to expandable,\r\n             * instead of the default accordion style.\r\n             */\r\n            accordion: true\r\n        } );\r\n\r\n        // Dropdown initialization\r\n        $( \".dropdown-button\" ).dropdown();\r\n\r\n    } );\r\n\r\n} )( jQuery );"],"file":"main.js","sourceRoot":"/source/"}