{"version":3,"names":[],"mappings":"","sources":["vendor.js"],"sourcesContent":["/**\r\n * Yael 3rd party scripts\r\n */\r\n\r\n;(function() {\r\n\"use strict\";\r\n\r\n/**\r\n * @license\r\n * Copyright 2015 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * A component handler interface using the revealing module design pattern.\r\n * More details on this design pattern here:\r\n * https://github.com/jasonmayes/mdl-component-design-pattern\r\n *\r\n * @author Jason Mayes.\r\n */\r\n/* exported componentHandler */\r\n\r\n// Pre-defining the componentHandler interface, for closure documentation and\r\n// static verification.\r\nvar componentHandler = {\r\n  /**\r\n   * Searches existing DOM for elements of our component type and upgrades them\r\n   * if they have not already been upgraded.\r\n   *\r\n   * @param {string=} optJsClass the programatic name of the element class we\r\n   * need to create a new instance of.\r\n   * @param {string=} optCssClass the name of the CSS class elements of this\r\n   * type will have.\r\n   */\r\n  upgradeDom: function(optJsClass, optCssClass) {},\r\n  /**\r\n   * Upgrades a specific element rather than all in the DOM.\r\n   *\r\n   * @param {!Element} element The element we wish to upgrade.\r\n   * @param {string=} optJsClass Optional name of the class we want to upgrade\r\n   * the element to.\r\n   */\r\n  upgradeElement: function(element, optJsClass) {},\r\n  /**\r\n   * Upgrades a specific list of elements rather than all in the DOM.\r\n   *\r\n   * @param {!Element|!Array<!Element>|!NodeList|!HTMLCollection} elements\r\n   * The elements we wish to upgrade.\r\n   */\r\n  upgradeElements: function(elements) {},\r\n  /**\r\n   * Upgrades all registered components found in the current DOM. This is\r\n   * automatically called on window load.\r\n   */\r\n  upgradeAllRegistered: function() {},\r\n  /**\r\n   * Allows user to be alerted to any upgrades that are performed for a given\r\n   * component type\r\n   *\r\n   * @param {string} jsClass The class name of the MDL component we wish\r\n   * to hook into for any upgrades performed.\r\n   * @param {function(!HTMLElement)} callback The function to call upon an\r\n   * upgrade. This function should expect 1 parameter - the HTMLElement which\r\n   * got upgraded.\r\n   */\r\n  registerUpgradedCallback: function(jsClass, callback) {},\r\n  /**\r\n   * Registers a class for future use and attempts to upgrade existing DOM.\r\n   *\r\n   * @param {componentHandler.ComponentConfigPublic} config the registration configuration\r\n   */\r\n  register: function(config) {},\r\n  /**\r\n   * Downgrade either a given node, an array of nodes, or a NodeList.\r\n   *\r\n   * @param {!Node|!Array<!Node>|!NodeList} nodes\r\n   */\r\n  downgradeElements: function(nodes) {}\r\n};\r\n\r\ncomponentHandler = (function() {\r\n  'use strict';\r\n\r\n  /** @type {!Array<componentHandler.ComponentConfig>} */\r\n  var registeredComponents_ = [];\r\n\r\n  /** @type {!Array<componentHandler.Component>} */\r\n  var createdComponents_ = [];\r\n\r\n  var componentConfigProperty_ = 'mdlComponentConfigInternal_';\r\n\r\n  /**\r\n   * Searches registered components for a class we are interested in using.\r\n   * Optionally replaces a match with passed object if specified.\r\n   *\r\n   * @param {string} name The name of a class we want to use.\r\n   * @param {componentHandler.ComponentConfig=} optReplace Optional object to replace match with.\r\n   * @return {!Object|boolean}\r\n   * @private\r\n   */\r\n  function findRegisteredClass_(name, optReplace) {\r\n    for (var i = 0; i < registeredComponents_.length; i++) {\r\n      if (registeredComponents_[i].className === name) {\r\n        if (typeof optReplace !== 'undefined') {\r\n          registeredComponents_[i] = optReplace;\r\n        }\r\n        return registeredComponents_[i];\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Returns an array of the classNames of the upgraded classes on the element.\r\n   *\r\n   * @param {!Element} element The element to fetch data from.\r\n   * @return {!Array<string>}\r\n   * @private\r\n   */\r\n  function getUpgradedListOfElement_(element) {\r\n    var dataUpgraded = element.getAttribute('data-upgraded');\r\n    // Use `['']` as default value to conform the `,name,name...` style.\r\n    return dataUpgraded === null ? [''] : dataUpgraded.split(',');\r\n  }\r\n\r\n  /**\r\n   * Returns true if the given element has already been upgraded for the given\r\n   * class.\r\n   *\r\n   * @param {!Element} element The element we want to check.\r\n   * @param {string} jsClass The class to check for.\r\n   * @returns {boolean}\r\n   * @private\r\n   */\r\n  function isElementUpgraded_(element, jsClass) {\r\n    var upgradedList = getUpgradedListOfElement_(element);\r\n    return upgradedList.indexOf(jsClass) !== -1;\r\n  }\r\n\r\n  /**\r\n   * Searches existing DOM for elements of our component type and upgrades them\r\n   * if they have not already been upgraded.\r\n   *\r\n   * @param {string=} optJsClass the programatic name of the element class we\r\n   * need to create a new instance of.\r\n   * @param {string=} optCssClass the name of the CSS class elements of this\r\n   * type will have.\r\n   */\r\n  function upgradeDomInternal(optJsClass, optCssClass) {\r\n    if (typeof optJsClass === 'undefined' &&\r\n        typeof optCssClass === 'undefined') {\r\n      for (var i = 0; i < registeredComponents_.length; i++) {\r\n        upgradeDomInternal(registeredComponents_[i].className,\r\n            registeredComponents_[i].cssClass);\r\n      }\r\n    } else {\r\n      var jsClass = /** @type {string} */ (optJsClass);\r\n      if (typeof optCssClass === 'undefined') {\r\n        var registeredClass = findRegisteredClass_(jsClass);\r\n        if (registeredClass) {\r\n          optCssClass = registeredClass.cssClass;\r\n        }\r\n      }\r\n\r\n      var elements = document.querySelectorAll('.' + optCssClass);\r\n      for (var n = 0; n < elements.length; n++) {\r\n        upgradeElementInternal(elements[n], jsClass);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Upgrades a specific element rather than all in the DOM.\r\n   *\r\n   * @param {!Element} element The element we wish to upgrade.\r\n   * @param {string=} optJsClass Optional name of the class we want to upgrade\r\n   * the element to.\r\n   */\r\n  function upgradeElementInternal(element, optJsClass) {\r\n    // Verify argument type.\r\n    if (!(typeof element === 'object' && element instanceof Element)) {\r\n      throw new Error('Invalid argument provided to upgrade MDL element.');\r\n    }\r\n    var upgradedList = getUpgradedListOfElement_(element);\r\n    var classesToUpgrade = [];\r\n    // If jsClass is not provided scan the registered components to find the\r\n    // ones matching the element's CSS classList.\r\n    if (!optJsClass) {\r\n      var classList = element.classList;\r\n      registeredComponents_.forEach(function(component) {\r\n        // Match CSS & Not to be upgraded & Not upgraded.\r\n        if (classList.contains(component.cssClass) &&\r\n            classesToUpgrade.indexOf(component) === -1 &&\r\n            !isElementUpgraded_(element, component.className)) {\r\n          classesToUpgrade.push(component);\r\n        }\r\n      });\r\n    } else if (!isElementUpgraded_(element, optJsClass)) {\r\n      classesToUpgrade.push(findRegisteredClass_(optJsClass));\r\n    }\r\n\r\n    // Upgrade the element for each classes.\r\n    for (var i = 0, n = classesToUpgrade.length, registeredClass; i < n; i++) {\r\n      registeredClass = classesToUpgrade[i];\r\n      if (registeredClass) {\r\n        // Mark element as upgraded.\r\n        upgradedList.push(registeredClass.className);\r\n        element.setAttribute('data-upgraded', upgradedList.join(','));\r\n        var instance = new registeredClass.classConstructor(element);\r\n        instance[componentConfigProperty_] = registeredClass;\r\n        createdComponents_.push(instance);\r\n        // Call any callbacks the user has registered with this component type.\r\n        for (var j = 0, m = registeredClass.callbacks.length; j < m; j++) {\r\n          registeredClass.callbacks[j](element);\r\n        }\r\n\r\n        if (registeredClass.widget) {\r\n          // Assign per element instance for control over API\r\n          element[registeredClass.className] = instance;\r\n        }\r\n      } else {\r\n        throw new Error(\r\n          'Unable to find a registered component for the given class.');\r\n      }\r\n\r\n      var ev;\r\n      if ('CustomEvent' in window && typeof window.CustomEvent === 'function') {\r\n        ev = new CustomEvent('mdl-componentupgraded', {\r\n          bubbles: true, cancelable: false\r\n        });\r\n      } else {\r\n        ev = document.createEvent('Events');\r\n        ev.initEvent('mdl-componentupgraded', true, true);\r\n      }\r\n      element.dispatchEvent(ev);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Upgrades a specific list of elements rather than all in the DOM.\r\n   *\r\n   * @param {!Element|!Array<!Element>|!NodeList|!HTMLCollection} elements\r\n   * The elements we wish to upgrade.\r\n   */\r\n  function upgradeElementsInternal(elements) {\r\n    if (!Array.isArray(elements)) {\r\n      if (elements instanceof Element) {\r\n        elements = [elements];\r\n      } else {\r\n        elements = Array.prototype.slice.call(elements);\r\n      }\r\n    }\r\n    for (var i = 0, n = elements.length, element; i < n; i++) {\r\n      element = elements[i];\r\n      if (element instanceof HTMLElement) {\r\n        upgradeElementInternal(element);\r\n        if (element.children.length > 0) {\r\n          upgradeElementsInternal(element.children);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers a class for future use and attempts to upgrade existing DOM.\r\n   *\r\n   * @param {componentHandler.ComponentConfigPublic} config\r\n   */\r\n  function registerInternal(config) {\r\n    // In order to support both Closure-compiled and uncompiled code accessing\r\n    // this method, we need to allow for both the dot and array syntax for\r\n    // property access. You'll therefore see the `foo.bar || foo['bar']`\r\n    // pattern repeated across this method.\r\n    var widgetMissing = (typeof config.widget === 'undefined' &&\r\n        typeof config['widget'] === 'undefined');\r\n    var widget = true;\r\n\r\n    if (!widgetMissing) {\r\n      widget = config.widget || config['widget'];\r\n    }\r\n\r\n    var newConfig = /** @type {componentHandler.ComponentConfig} */ ({\r\n      classConstructor: config.constructor || config['constructor'],\r\n      className: config.classAsString || config['classAsString'],\r\n      cssClass: config.cssClass || config['cssClass'],\r\n      widget: widget,\r\n      callbacks: []\r\n    });\r\n\r\n    registeredComponents_.forEach(function(item) {\r\n      if (item.cssClass === newConfig.cssClass) {\r\n        throw new Error('The provided cssClass has already been registered: ' + item.cssClass);\r\n      }\r\n      if (item.className === newConfig.className) {\r\n        throw new Error('The provided className has already been registered');\r\n      }\r\n    });\r\n\r\n    if (config.constructor.prototype\r\n        .hasOwnProperty(componentConfigProperty_)) {\r\n      throw new Error(\r\n          'MDL component classes must not have ' + componentConfigProperty_ +\r\n          ' defined as a property.');\r\n    }\r\n\r\n    var found = findRegisteredClass_(config.classAsString, newConfig);\r\n\r\n    if (!found) {\r\n      registeredComponents_.push(newConfig);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Allows user to be alerted to any upgrades that are performed for a given\r\n   * component type\r\n   *\r\n   * @param {string} jsClass The class name of the MDL component we wish\r\n   * to hook into for any upgrades performed.\r\n   * @param {function(!HTMLElement)} callback The function to call upon an\r\n   * upgrade. This function should expect 1 parameter - the HTMLElement which\r\n   * got upgraded.\r\n   */\r\n  function registerUpgradedCallbackInternal(jsClass, callback) {\r\n    var regClass = findRegisteredClass_(jsClass);\r\n    if (regClass) {\r\n      regClass.callbacks.push(callback);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Upgrades all registered components found in the current DOM. This is\r\n   * automatically called on window load.\r\n   */\r\n  function upgradeAllRegisteredInternal() {\r\n    for (var n = 0; n < registeredComponents_.length; n++) {\r\n      upgradeDomInternal(registeredComponents_[n].className);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check the component for the downgrade method.\r\n   * Execute if found.\r\n   * Remove component from createdComponents list.\r\n   *\r\n   * @param {?componentHandler.Component} component\r\n   */\r\n  function deconstructComponentInternal(component) {\r\n    if (component) {\r\n      var componentIndex = createdComponents_.indexOf(component);\r\n      createdComponents_.splice(componentIndex, 1);\r\n\r\n      var upgrades = component.element_.getAttribute('data-upgraded').split(',');\r\n      var componentPlace = upgrades.indexOf(component[componentConfigProperty_].classAsString);\r\n      upgrades.splice(componentPlace, 1);\r\n      component.element_.setAttribute('data-upgraded', upgrades.join(','));\r\n\r\n      var ev;\r\n      if ('CustomEvent' in window && typeof window.CustomEvent === 'function') {\r\n        ev = new CustomEvent('mdl-componentdowngraded', {\r\n          bubbles: true, cancelable: false\r\n        });\r\n      } else {\r\n        ev = document.createEvent('Events');\r\n        ev.initEvent('mdl-componentdowngraded', true, true);\r\n      }\r\n      component.element_.dispatchEvent(ev);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Downgrade either a given node, an array of nodes, or a NodeList.\r\n   *\r\n   * @param {!Node|!Array<!Node>|!NodeList} nodes\r\n   */\r\n  function downgradeNodesInternal(nodes) {\r\n    /**\r\n     * Auxiliary function to downgrade a single node.\r\n     * @param  {!Node} node the node to be downgraded\r\n     */\r\n    var downgradeNode = function(node) {\r\n      createdComponents_.filter(function(item) {\r\n        return item.element_ === node;\r\n      }).forEach(deconstructComponentInternal);\r\n    };\r\n    if (nodes instanceof Array || nodes instanceof NodeList) {\r\n      for (var n = 0; n < nodes.length; n++) {\r\n        downgradeNode(nodes[n]);\r\n      }\r\n    } else if (nodes instanceof Node) {\r\n      downgradeNode(nodes);\r\n    } else {\r\n      throw new Error('Invalid argument provided to downgrade MDL nodes.');\r\n    }\r\n  }\r\n\r\n  // Now return the functions that should be made public with their publicly\r\n  // facing names...\r\n  return {\r\n    upgradeDom: upgradeDomInternal,\r\n    upgradeElement: upgradeElementInternal,\r\n    upgradeElements: upgradeElementsInternal,\r\n    upgradeAllRegistered: upgradeAllRegisteredInternal,\r\n    registerUpgradedCallback: registerUpgradedCallbackInternal,\r\n    register: registerInternal,\r\n    downgradeElements: downgradeNodesInternal\r\n  };\r\n})();\r\n\r\n/**\r\n * Describes the type of a registered component type managed by\r\n * componentHandler. Provided for benefit of the Closure compiler.\r\n *\r\n * @typedef {{\r\n *   constructor: Function,\r\n *   classAsString: string,\r\n *   cssClass: string,\r\n *   widget: (string|boolean|undefined)\r\n * }}\r\n */\r\ncomponentHandler.ComponentConfigPublic;  // jshint ignore:line\r\n\r\n/**\r\n * Describes the type of a registered component type managed by\r\n * componentHandler. Provided for benefit of the Closure compiler.\r\n *\r\n * @typedef {{\r\n *   constructor: !Function,\r\n *   className: string,\r\n *   cssClass: string,\r\n *   widget: (string|boolean),\r\n *   callbacks: !Array<function(!HTMLElement)>\r\n * }}\r\n */\r\ncomponentHandler.ComponentConfig;  // jshint ignore:line\r\n\r\n/**\r\n * Created component (i.e., upgraded element) type as managed by\r\n * componentHandler. Provided for benefit of the Closure compiler.\r\n *\r\n * @typedef {{\r\n *   element_: !HTMLElement,\r\n *   className: string,\r\n *   classAsString: string,\r\n *   cssClass: string,\r\n *   widget: string\r\n * }}\r\n */\r\ncomponentHandler.Component;  // jshint ignore:line\r\n\r\n// Export all symbols, for the benefit of Closure compiler.\r\n// No effect on uncompiled code.\r\ncomponentHandler['upgradeDom'] = componentHandler.upgradeDom;\r\ncomponentHandler['upgradeElement'] = componentHandler.upgradeElement;\r\ncomponentHandler['upgradeElements'] = componentHandler.upgradeElements;\r\ncomponentHandler['upgradeAllRegistered'] =\r\n    componentHandler.upgradeAllRegistered;\r\ncomponentHandler['registerUpgradedCallback'] =\r\n    componentHandler.registerUpgradedCallback;\r\ncomponentHandler['register'] = componentHandler.register;\r\ncomponentHandler['downgradeElements'] = componentHandler.downgradeElements;\r\nwindow.componentHandler = componentHandler;\r\nwindow['componentHandler'] = componentHandler;\r\n\r\nwindow.addEventListener('load', function() {\r\n  'use strict';\r\n\r\n  /**\r\n   * Performs a \"Cutting the mustard\" test. If the browser supports the features\r\n   * tested, adds a mdl-js class to the <html> element. It then upgrades all MDL\r\n   * components requiring JavaScript.\r\n   */\r\n  if ('classList' in document.createElement('div') &&\r\n      'querySelector' in document &&\r\n      'addEventListener' in window && Array.prototype.forEach) {\r\n    document.documentElement.classList.add('mdl-js');\r\n    componentHandler.upgradeAllRegistered();\r\n  } else {\r\n    /**\r\n     * Dummy function to avoid JS errors.\r\n     */\r\n    componentHandler.upgradeElement = function() {};\r\n    /**\r\n     * Dummy function to avoid JS errors.\r\n     */\r\n    componentHandler.register = function() {};\r\n  }\r\n});\r\n\r\n// Source: https://github.com/darius/requestAnimationFrame/blob/master/requestAnimationFrame.js\r\n// Adapted from https://gist.github.com/paulirish/1579671 which derived from\r\n// http://paulirish.com/2011/requestanimationframe-for-smart-animating/\r\n// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\r\n// requestAnimationFrame polyfill by Erik Möller.\r\n// Fixes from Paul Irish, Tino Zijdel, Andrew Mao, Klemen Slavič, Darius Bacon\r\n// MIT license\r\nif (!Date.now) {\r\n    /**\r\n   * Date.now polyfill.\r\n   * @return {number} the current Date\r\n   */\r\n    Date.now = function () {\r\n        return new Date().getTime();\r\n    };\r\n    Date['now'] = Date.now;\r\n}\r\nvar vendors = [\r\n    'webkit',\r\n    'moz'\r\n];\r\nfor (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {\r\n    var vp = vendors[i];\r\n    window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];\r\n    window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];\r\n    window['requestAnimationFrame'] = window.requestAnimationFrame;\r\n    window['cancelAnimationFrame'] = window.cancelAnimationFrame;\r\n}\r\nif (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {\r\n    var lastTime = 0;\r\n    /**\r\n   * requestAnimationFrame polyfill.\r\n   * @param  {!Function} callback the callback function.\r\n   */\r\n    window.requestAnimationFrame = function (callback) {\r\n        var now = Date.now();\r\n        var nextTime = Math.max(lastTime + 16, now);\r\n        return setTimeout(function () {\r\n            callback(lastTime = nextTime);\r\n        }, nextTime - now);\r\n    };\r\n    window.cancelAnimationFrame = clearTimeout;\r\n    window['requestAnimationFrame'] = window.requestAnimationFrame;\r\n    window['cancelAnimationFrame'] = window.cancelAnimationFrame;\r\n}\r\n/**\r\n * @license\r\n * Copyright 2015 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n   * Class constructor for Button MDL component.\r\n   * Implements MDL component design pattern defined at:\r\n   * https://github.com/jasonmayes/mdl-component-design-pattern\r\n   *\r\n   * @param {HTMLElement} element The element that will be upgraded.\r\n   */\r\nvar MaterialButton = function MaterialButton(element) {\r\n    this.element_ = element;\r\n    // Initialize instance.\r\n    this.init();\r\n};\r\nwindow['MaterialButton'] = MaterialButton;\r\n/**\r\n   * Store constants in one place so they can be updated easily.\r\n   *\r\n   * @enum {string | number}\r\n   * @private\r\n   */\r\nMaterialButton.prototype.Constant_ = {};\r\n/**\r\n   * Store strings for class names defined by this component that are used in\r\n   * JavaScript. This allows us to simply change it in one place should we\r\n   * decide to modify at a later date.\r\n   *\r\n   * @enum {string}\r\n   * @private\r\n   */\r\nMaterialButton.prototype.CssClasses_ = {\r\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\r\n    RIPPLE_CONTAINER: 'mdl-button__ripple-container',\r\n    RIPPLE: 'mdl-ripple'\r\n};\r\n/**\r\n   * Handle blur of element.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\nMaterialButton.prototype.blurHandler_ = function (event) {\r\n    if (event) {\r\n        this.element_.blur();\r\n    }\r\n};\r\n// Public methods.\r\n/**\r\n   * Disable button.\r\n   *\r\n   * @public\r\n   */\r\nMaterialButton.prototype.disable = function () {\r\n    this.element_.disabled = true;\r\n};\r\nMaterialButton.prototype['disable'] = MaterialButton.prototype.disable;\r\n/**\r\n   * Enable button.\r\n   *\r\n   * @public\r\n   */\r\nMaterialButton.prototype.enable = function () {\r\n    this.element_.disabled = false;\r\n};\r\nMaterialButton.prototype['enable'] = MaterialButton.prototype.enable;\r\n/**\r\n   * Initialize element.\r\n   */\r\nMaterialButton.prototype.init = function () {\r\n    if (this.element_) {\r\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\r\n            var rippleContainer = document.createElement('span');\r\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\r\n            this.rippleElement_ = document.createElement('span');\r\n            this.rippleElement_.classList.add(this.CssClasses_.RIPPLE);\r\n            rippleContainer.appendChild(this.rippleElement_);\r\n            this.boundRippleBlurHandler = this.blurHandler_.bind(this);\r\n            this.rippleElement_.addEventListener('mouseup', this.boundRippleBlurHandler);\r\n            this.element_.appendChild(rippleContainer);\r\n        }\r\n        this.boundButtonBlurHandler = this.blurHandler_.bind(this);\r\n        this.element_.addEventListener('mouseup', this.boundButtonBlurHandler);\r\n        this.element_.addEventListener('mouseleave', this.boundButtonBlurHandler);\r\n    }\r\n};\r\n// The component registers itself. It can assume componentHandler is available\r\n// in the global scope.\r\ncomponentHandler.register({\r\n    constructor: MaterialButton,\r\n    classAsString: 'MaterialButton',\r\n    cssClass: 'mdl-js-button',\r\n    widget: true\r\n});\r\n/**\r\n * @license\r\n * Copyright 2015 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n   * Class constructor for Checkbox MDL component.\r\n   * Implements MDL component design pattern defined at:\r\n   * https://github.com/jasonmayes/mdl-component-design-pattern\r\n   *\r\n   * @constructor\r\n   * @param {HTMLElement} element The element that will be upgraded.\r\n   */\r\nvar MaterialCheckbox = function MaterialCheckbox(element) {\r\n    this.element_ = element;\r\n    // Initialize instance.\r\n    this.init();\r\n};\r\nwindow['MaterialCheckbox'] = MaterialCheckbox;\r\n/**\r\n   * Store constants in one place so they can be updated easily.\r\n   *\r\n   * @enum {string | number}\r\n   * @private\r\n   */\r\nMaterialCheckbox.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };\r\n/**\r\n   * Store strings for class names defined by this component that are used in\r\n   * JavaScript. This allows us to simply change it in one place should we\r\n   * decide to modify at a later date.\r\n   *\r\n   * @enum {string}\r\n   * @private\r\n   */\r\nMaterialCheckbox.prototype.CssClasses_ = {\r\n    INPUT: 'mdl-checkbox__input',\r\n    BOX_OUTLINE: 'mdl-checkbox__box-outline',\r\n    FOCUS_HELPER: 'mdl-checkbox__focus-helper',\r\n    TICK_OUTLINE: 'mdl-checkbox__tick-outline',\r\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\r\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\r\n    RIPPLE_CONTAINER: 'mdl-checkbox__ripple-container',\r\n    RIPPLE_CENTER: 'mdl-ripple--center',\r\n    RIPPLE: 'mdl-ripple',\r\n    IS_FOCUSED: 'is-focused',\r\n    IS_DISABLED: 'is-disabled',\r\n    IS_CHECKED: 'is-checked',\r\n    IS_UPGRADED: 'is-upgraded'\r\n};\r\n/**\r\n   * Handle change of state.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\nMaterialCheckbox.prototype.onChange_ = function (event) {\r\n    this.updateClasses_();\r\n};\r\n/**\r\n   * Handle focus of element.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\nMaterialCheckbox.prototype.onFocus_ = function (event) {\r\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\r\n};\r\n/**\r\n   * Handle lost focus of element.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\nMaterialCheckbox.prototype.onBlur_ = function (event) {\r\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\r\n};\r\n/**\r\n   * Handle mouseup.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\nMaterialCheckbox.prototype.onMouseUp_ = function (event) {\r\n    this.blur_();\r\n};\r\n/**\r\n   * Handle class updates.\r\n   *\r\n   * @private\r\n   */\r\nMaterialCheckbox.prototype.updateClasses_ = function () {\r\n    this.checkDisabled();\r\n    this.checkToggleState();\r\n};\r\n/**\r\n   * Add blur.\r\n   *\r\n   * @private\r\n   */\r\nMaterialCheckbox.prototype.blur_ = function () {\r\n    // TODO: figure out why there's a focus event being fired after our blur,\r\n    // so that we can avoid this hack.\r\n    window.setTimeout(function () {\r\n        this.inputElement_.blur();\r\n    }.bind(this), this.Constant_.TINY_TIMEOUT);\r\n};\r\n// Public methods.\r\n/**\r\n   * Check the inputs toggle state and update display.\r\n   *\r\n   * @public\r\n   */\r\nMaterialCheckbox.prototype.checkToggleState = function () {\r\n    if (this.inputElement_.checked) {\r\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);\r\n    } else {\r\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);\r\n    }\r\n};\r\nMaterialCheckbox.prototype['checkToggleState'] = MaterialCheckbox.prototype.checkToggleState;\r\n/**\r\n   * Check the inputs disabled state and update display.\r\n   *\r\n   * @public\r\n   */\r\nMaterialCheckbox.prototype.checkDisabled = function () {\r\n    if (this.inputElement_.disabled) {\r\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);\r\n    } else {\r\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\r\n    }\r\n};\r\nMaterialCheckbox.prototype['checkDisabled'] = MaterialCheckbox.prototype.checkDisabled;\r\n/**\r\n   * Disable checkbox.\r\n   *\r\n   * @public\r\n   */\r\nMaterialCheckbox.prototype.disable = function () {\r\n    this.inputElement_.disabled = true;\r\n    this.updateClasses_();\r\n};\r\nMaterialCheckbox.prototype['disable'] = MaterialCheckbox.prototype.disable;\r\n/**\r\n   * Enable checkbox.\r\n   *\r\n   * @public\r\n   */\r\nMaterialCheckbox.prototype.enable = function () {\r\n    this.inputElement_.disabled = false;\r\n    this.updateClasses_();\r\n};\r\nMaterialCheckbox.prototype['enable'] = MaterialCheckbox.prototype.enable;\r\n/**\r\n   * Check checkbox.\r\n   *\r\n   * @public\r\n   */\r\nMaterialCheckbox.prototype.check = function () {\r\n    this.inputElement_.checked = true;\r\n    this.updateClasses_();\r\n};\r\nMaterialCheckbox.prototype['check'] = MaterialCheckbox.prototype.check;\r\n/**\r\n   * Uncheck checkbox.\r\n   *\r\n   * @public\r\n   */\r\nMaterialCheckbox.prototype.uncheck = function () {\r\n    this.inputElement_.checked = false;\r\n    this.updateClasses_();\r\n};\r\nMaterialCheckbox.prototype['uncheck'] = MaterialCheckbox.prototype.uncheck;\r\n/**\r\n   * Initialize element.\r\n   */\r\nMaterialCheckbox.prototype.init = function () {\r\n    if (this.element_) {\r\n        this.inputElement_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\r\n        var boxOutline = document.createElement('span');\r\n        boxOutline.classList.add(this.CssClasses_.BOX_OUTLINE);\r\n        var tickContainer = document.createElement('span');\r\n        tickContainer.classList.add(this.CssClasses_.FOCUS_HELPER);\r\n        var tickOutline = document.createElement('span');\r\n        tickOutline.classList.add(this.CssClasses_.TICK_OUTLINE);\r\n        boxOutline.appendChild(tickOutline);\r\n        this.element_.appendChild(tickContainer);\r\n        this.element_.appendChild(boxOutline);\r\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\r\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\r\n            this.rippleContainerElement_ = document.createElement('span');\r\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\r\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_EFFECT);\r\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);\r\n            this.boundRippleMouseUp = this.onMouseUp_.bind(this);\r\n            this.rippleContainerElement_.addEventListener('mouseup', this.boundRippleMouseUp);\r\n            var ripple = document.createElement('span');\r\n            ripple.classList.add(this.CssClasses_.RIPPLE);\r\n            this.rippleContainerElement_.appendChild(ripple);\r\n            this.element_.appendChild(this.rippleContainerElement_);\r\n        }\r\n        this.boundInputOnChange = this.onChange_.bind(this);\r\n        this.boundInputOnFocus = this.onFocus_.bind(this);\r\n        this.boundInputOnBlur = this.onBlur_.bind(this);\r\n        this.boundElementMouseUp = this.onMouseUp_.bind(this);\r\n        this.inputElement_.addEventListener('change', this.boundInputOnChange);\r\n        this.inputElement_.addEventListener('focus', this.boundInputOnFocus);\r\n        this.inputElement_.addEventListener('blur', this.boundInputOnBlur);\r\n        this.element_.addEventListener('mouseup', this.boundElementMouseUp);\r\n        this.updateClasses_();\r\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\r\n    }\r\n};\r\n// The component registers itself. It can assume componentHandler is available\r\n// in the global scope.\r\ncomponentHandler.register({\r\n    constructor: MaterialCheckbox,\r\n    classAsString: 'MaterialCheckbox',\r\n    cssClass: 'mdl-js-checkbox',\r\n    widget: true\r\n});\r\n/**\r\n * @license\r\n * Copyright 2015 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n   * Class constructor for icon toggle MDL component.\r\n   * Implements MDL component design pattern defined at:\r\n   * https://github.com/jasonmayes/mdl-component-design-pattern\r\n   *\r\n   * @constructor\r\n   * @param {HTMLElement} element The element that will be upgraded.\r\n   */\r\nvar MaterialIconToggle = function MaterialIconToggle(element) {\r\n    this.element_ = element;\r\n    // Initialize instance.\r\n    this.init();\r\n};\r\nwindow['MaterialIconToggle'] = MaterialIconToggle;\r\n/**\r\n   * Store constants in one place so they can be updated easily.\r\n   *\r\n   * @enum {string | number}\r\n   * @private\r\n   */\r\nMaterialIconToggle.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };\r\n/**\r\n   * Store strings for class names defined by this component that are used in\r\n   * JavaScript. This allows us to simply change it in one place should we\r\n   * decide to modify at a later date.\r\n   *\r\n   * @enum {string}\r\n   * @private\r\n   */\r\nMaterialIconToggle.prototype.CssClasses_ = {\r\n    INPUT: 'mdl-icon-toggle__input',\r\n    JS_RIPPLE_EFFECT: 'mdl-js-ripple-effect',\r\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\r\n    RIPPLE_CONTAINER: 'mdl-icon-toggle__ripple-container',\r\n    RIPPLE_CENTER: 'mdl-ripple--center',\r\n    RIPPLE: 'mdl-ripple',\r\n    IS_FOCUSED: 'is-focused',\r\n    IS_DISABLED: 'is-disabled',\r\n    IS_CHECKED: 'is-checked'\r\n};\r\n/**\r\n   * Handle change of state.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\nMaterialIconToggle.prototype.onChange_ = function (event) {\r\n    this.updateClasses_();\r\n};\r\n/**\r\n   * Handle focus of element.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\nMaterialIconToggle.prototype.onFocus_ = function (event) {\r\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\r\n};\r\n/**\r\n   * Handle lost focus of element.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\nMaterialIconToggle.prototype.onBlur_ = function (event) {\r\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\r\n};\r\n/**\r\n   * Handle mouseup.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\nMaterialIconToggle.prototype.onMouseUp_ = function (event) {\r\n    this.blur_();\r\n};\r\n/**\r\n   * Handle class updates.\r\n   *\r\n   * @private\r\n   */\r\nMaterialIconToggle.prototype.updateClasses_ = function () {\r\n    this.checkDisabled();\r\n    this.checkToggleState();\r\n};\r\n/**\r\n   * Add blur.\r\n   *\r\n   * @private\r\n   */\r\nMaterialIconToggle.prototype.blur_ = function () {\r\n    // TODO: figure out why there's a focus event being fired after our blur,\r\n    // so that we can avoid this hack.\r\n    window.setTimeout(function () {\r\n        this.inputElement_.blur();\r\n    }.bind(this), this.Constant_.TINY_TIMEOUT);\r\n};\r\n// Public methods.\r\n/**\r\n   * Check the inputs toggle state and update display.\r\n   *\r\n   * @public\r\n   */\r\nMaterialIconToggle.prototype.checkToggleState = function () {\r\n    if (this.inputElement_.checked) {\r\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);\r\n    } else {\r\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);\r\n    }\r\n};\r\nMaterialIconToggle.prototype['checkToggleState'] = MaterialIconToggle.prototype.checkToggleState;\r\n/**\r\n   * Check the inputs disabled state and update display.\r\n   *\r\n   * @public\r\n   */\r\nMaterialIconToggle.prototype.checkDisabled = function () {\r\n    if (this.inputElement_.disabled) {\r\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);\r\n    } else {\r\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\r\n    }\r\n};\r\nMaterialIconToggle.prototype['checkDisabled'] = MaterialIconToggle.prototype.checkDisabled;\r\n/**\r\n   * Disable icon toggle.\r\n   *\r\n   * @public\r\n   */\r\nMaterialIconToggle.prototype.disable = function () {\r\n    this.inputElement_.disabled = true;\r\n    this.updateClasses_();\r\n};\r\nMaterialIconToggle.prototype['disable'] = MaterialIconToggle.prototype.disable;\r\n/**\r\n   * Enable icon toggle.\r\n   *\r\n   * @public\r\n   */\r\nMaterialIconToggle.prototype.enable = function () {\r\n    this.inputElement_.disabled = false;\r\n    this.updateClasses_();\r\n};\r\nMaterialIconToggle.prototype['enable'] = MaterialIconToggle.prototype.enable;\r\n/**\r\n   * Check icon toggle.\r\n   *\r\n   * @public\r\n   */\r\nMaterialIconToggle.prototype.check = function () {\r\n    this.inputElement_.checked = true;\r\n    this.updateClasses_();\r\n};\r\nMaterialIconToggle.prototype['check'] = MaterialIconToggle.prototype.check;\r\n/**\r\n   * Uncheck icon toggle.\r\n   *\r\n   * @public\r\n   */\r\nMaterialIconToggle.prototype.uncheck = function () {\r\n    this.inputElement_.checked = false;\r\n    this.updateClasses_();\r\n};\r\nMaterialIconToggle.prototype['uncheck'] = MaterialIconToggle.prototype.uncheck;\r\n/**\r\n   * Initialize element.\r\n   */\r\nMaterialIconToggle.prototype.init = function () {\r\n    if (this.element_) {\r\n        this.inputElement_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\r\n        if (this.element_.classList.contains(this.CssClasses_.JS_RIPPLE_EFFECT)) {\r\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\r\n            this.rippleContainerElement_ = document.createElement('span');\r\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\r\n            this.rippleContainerElement_.classList.add(this.CssClasses_.JS_RIPPLE_EFFECT);\r\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);\r\n            this.boundRippleMouseUp = this.onMouseUp_.bind(this);\r\n            this.rippleContainerElement_.addEventListener('mouseup', this.boundRippleMouseUp);\r\n            var ripple = document.createElement('span');\r\n            ripple.classList.add(this.CssClasses_.RIPPLE);\r\n            this.rippleContainerElement_.appendChild(ripple);\r\n            this.element_.appendChild(this.rippleContainerElement_);\r\n        }\r\n        this.boundInputOnChange = this.onChange_.bind(this);\r\n        this.boundInputOnFocus = this.onFocus_.bind(this);\r\n        this.boundInputOnBlur = this.onBlur_.bind(this);\r\n        this.boundElementOnMouseUp = this.onMouseUp_.bind(this);\r\n        this.inputElement_.addEventListener('change', this.boundInputOnChange);\r\n        this.inputElement_.addEventListener('focus', this.boundInputOnFocus);\r\n        this.inputElement_.addEventListener('blur', this.boundInputOnBlur);\r\n        this.element_.addEventListener('mouseup', this.boundElementOnMouseUp);\r\n        this.updateClasses_();\r\n        this.element_.classList.add('is-upgraded');\r\n    }\r\n};\r\n// The component registers itself. It can assume componentHandler is available\r\n// in the global scope.\r\ncomponentHandler.register({\r\n    constructor: MaterialIconToggle,\r\n    classAsString: 'MaterialIconToggle',\r\n    cssClass: 'mdl-js-icon-toggle',\r\n    widget: true\r\n});\r\n/**\r\n * @license\r\n * Copyright 2015 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n   * Class constructor for dropdown MDL component.\r\n   * Implements MDL component design pattern defined at:\r\n   * https://github.com/jasonmayes/mdl-component-design-pattern\r\n   *\r\n   * @constructor\r\n   * @param {HTMLElement} element The element that will be upgraded.\r\n   */\r\nvar MaterialMenu = function MaterialMenu(element) {\r\n    this.element_ = element;\r\n    // Initialize instance.\r\n    this.init();\r\n};\r\nwindow['MaterialMenu'] = MaterialMenu;\r\n/**\r\n   * Store constants in one place so they can be updated easily.\r\n   *\r\n   * @enum {string | number}\r\n   * @private\r\n   */\r\nMaterialMenu.prototype.Constant_ = {\r\n    // Total duration of the menu animation.\r\n    TRANSITION_DURATION_SECONDS: 0.3,\r\n    // The fraction of the total duration we want to use for menu item animations.\r\n    TRANSITION_DURATION_FRACTION: 0.8,\r\n    // How long the menu stays open after choosing an option (so the user can see\r\n    // the ripple).\r\n    CLOSE_TIMEOUT: 150\r\n};\r\n/**\r\n   * Keycodes, for code readability.\r\n   *\r\n   * @enum {number}\r\n   * @private\r\n   */\r\nMaterialMenu.prototype.Keycodes_ = {\r\n    ENTER: 13,\r\n    ESCAPE: 27,\r\n    SPACE: 32,\r\n    UP_ARROW: 38,\r\n    DOWN_ARROW: 40\r\n};\r\n/**\r\n   * Store strings for class names defined by this component that are used in\r\n   * JavaScript. This allows us to simply change it in one place should we\r\n   * decide to modify at a later date.\r\n   *\r\n   * @enum {string}\r\n   * @private\r\n   */\r\nMaterialMenu.prototype.CssClasses_ = {\r\n    CONTAINER: 'mdl-menu__container',\r\n    OUTLINE: 'mdl-menu__outline',\r\n    ITEM: 'mdl-menu__item',\r\n    ITEM_RIPPLE_CONTAINER: 'mdl-menu__item-ripple-container',\r\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\r\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\r\n    RIPPLE: 'mdl-ripple',\r\n    // Statuses\r\n    IS_UPGRADED: 'is-upgraded',\r\n    IS_VISIBLE: 'is-visible',\r\n    IS_ANIMATING: 'is-animating',\r\n    // Alignment options\r\n    BOTTOM_LEFT: 'mdl-menu--bottom-left',\r\n    // This is the default.\r\n    BOTTOM_RIGHT: 'mdl-menu--bottom-right',\r\n    TOP_LEFT: 'mdl-menu--top-left',\r\n    TOP_RIGHT: 'mdl-menu--top-right',\r\n    UNALIGNED: 'mdl-menu--unaligned'\r\n};\r\n/**\r\n   * Initialize element.\r\n   */\r\nMaterialMenu.prototype.init = function () {\r\n    if (this.element_) {\r\n        // Create container for the menu.\r\n        var container = document.createElement('div');\r\n        container.classList.add(this.CssClasses_.CONTAINER);\r\n        this.element_.parentElement.insertBefore(container, this.element_);\r\n        this.element_.parentElement.removeChild(this.element_);\r\n        container.appendChild(this.element_);\r\n        this.container_ = container;\r\n        // Create outline for the menu (shadow and background).\r\n        var outline = document.createElement('div');\r\n        outline.classList.add(this.CssClasses_.OUTLINE);\r\n        this.outline_ = outline;\r\n        container.insertBefore(outline, this.element_);\r\n        // Find the \"for\" element and bind events to it.\r\n        var forElId = this.element_.getAttribute('for') || this.element_.getAttribute('data-mdl-for');\r\n        var forEl = null;\r\n        if (forElId) {\r\n            forEl = document.getElementById(forElId);\r\n            if (forEl) {\r\n                this.forElement_ = forEl;\r\n                forEl.addEventListener('click', this.handleForClick_.bind(this));\r\n                forEl.addEventListener('keydown', this.handleForKeyboardEvent_.bind(this));\r\n            }\r\n        }\r\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM);\r\n        this.boundItemKeydown_ = this.handleItemKeyboardEvent_.bind(this);\r\n        this.boundItemClick_ = this.handleItemClick_.bind(this);\r\n        for (var i = 0; i < items.length; i++) {\r\n            // Add a listener to each menu item.\r\n            items[i].addEventListener('click', this.boundItemClick_);\r\n            // Add a tab index to each menu item.\r\n            items[i].tabIndex = '-1';\r\n            // Add a keyboard listener to each menu item.\r\n            items[i].addEventListener('keydown', this.boundItemKeydown_);\r\n        }\r\n        // Add ripple classes to each item, if the user has enabled ripples.\r\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\r\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\r\n            for (i = 0; i < items.length; i++) {\r\n                var item = items[i];\r\n                var rippleContainer = document.createElement('span');\r\n                rippleContainer.classList.add(this.CssClasses_.ITEM_RIPPLE_CONTAINER);\r\n                var ripple = document.createElement('span');\r\n                ripple.classList.add(this.CssClasses_.RIPPLE);\r\n                rippleContainer.appendChild(ripple);\r\n                item.appendChild(rippleContainer);\r\n                item.classList.add(this.CssClasses_.RIPPLE_EFFECT);\r\n            }\r\n        }\r\n        // Copy alignment classes to the container, so the outline can use them.\r\n        if (this.element_.classList.contains(this.CssClasses_.BOTTOM_LEFT)) {\r\n            this.outline_.classList.add(this.CssClasses_.BOTTOM_LEFT);\r\n        }\r\n        if (this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)) {\r\n            this.outline_.classList.add(this.CssClasses_.BOTTOM_RIGHT);\r\n        }\r\n        if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT)) {\r\n            this.outline_.classList.add(this.CssClasses_.TOP_LEFT);\r\n        }\r\n        if (this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {\r\n            this.outline_.classList.add(this.CssClasses_.TOP_RIGHT);\r\n        }\r\n        if (this.element_.classList.contains(this.CssClasses_.UNALIGNED)) {\r\n            this.outline_.classList.add(this.CssClasses_.UNALIGNED);\r\n        }\r\n        container.classList.add(this.CssClasses_.IS_UPGRADED);\r\n    }\r\n};\r\n/**\r\n   * Handles a click on the \"for\" element, by positioning the menu and then\r\n   * toggling it.\r\n   *\r\n   * @param {Event} evt The event that fired.\r\n   * @private\r\n   */\r\nMaterialMenu.prototype.handleForClick_ = function (evt) {\r\n    if (this.element_ && this.forElement_) {\r\n        var rect = this.forElement_.getBoundingClientRect();\r\n        var forRect = this.forElement_.parentElement.getBoundingClientRect();\r\n        if (this.element_.classList.contains(this.CssClasses_.UNALIGNED)) {\r\n        } else if (this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)) {\r\n            // Position below the \"for\" element, aligned to its right.\r\n            this.container_.style.right = forRect.right - rect.right + 'px';\r\n            this.container_.style.top = this.forElement_.offsetTop + this.forElement_.offsetHeight + 'px';\r\n        } else if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT)) {\r\n            // Position above the \"for\" element, aligned to its left.\r\n            this.container_.style.left = this.forElement_.offsetLeft + 'px';\r\n            this.container_.style.bottom = forRect.bottom - rect.top + 'px';\r\n        } else if (this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {\r\n            // Position above the \"for\" element, aligned to its right.\r\n            this.container_.style.right = forRect.right - rect.right + 'px';\r\n            this.container_.style.bottom = forRect.bottom - rect.top + 'px';\r\n        } else {\r\n            // Default: position below the \"for\" element, aligned to its left.\r\n            this.container_.style.left = this.forElement_.offsetLeft + 'px';\r\n            this.container_.style.top = this.forElement_.offsetTop + this.forElement_.offsetHeight + 'px';\r\n        }\r\n    }\r\n    this.toggle(evt);\r\n};\r\n/**\r\n   * Handles a keyboard event on the \"for\" element.\r\n   *\r\n   * @param {Event} evt The event that fired.\r\n   * @private\r\n   */\r\nMaterialMenu.prototype.handleForKeyboardEvent_ = function (evt) {\r\n    if (this.element_ && this.container_ && this.forElement_) {\r\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM + ':not([disabled])');\r\n        if (items && items.length > 0 && this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)) {\r\n            if (evt.keyCode === this.Keycodes_.UP_ARROW) {\r\n                evt.preventDefault();\r\n                items[items.length - 1].focus();\r\n            } else if (evt.keyCode === this.Keycodes_.DOWN_ARROW) {\r\n                evt.preventDefault();\r\n                items[0].focus();\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n   * Handles a keyboard event on an item.\r\n   *\r\n   * @param {Event} evt The event that fired.\r\n   * @private\r\n   */\r\nMaterialMenu.prototype.handleItemKeyboardEvent_ = function (evt) {\r\n    if (this.element_ && this.container_) {\r\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM + ':not([disabled])');\r\n        if (items && items.length > 0 && this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)) {\r\n            var currentIndex = Array.prototype.slice.call(items).indexOf(evt.target);\r\n            if (evt.keyCode === this.Keycodes_.UP_ARROW) {\r\n                evt.preventDefault();\r\n                if (currentIndex > 0) {\r\n                    items[currentIndex - 1].focus();\r\n                } else {\r\n                    items[items.length - 1].focus();\r\n                }\r\n            } else if (evt.keyCode === this.Keycodes_.DOWN_ARROW) {\r\n                evt.preventDefault();\r\n                if (items.length > currentIndex + 1) {\r\n                    items[currentIndex + 1].focus();\r\n                } else {\r\n                    items[0].focus();\r\n                }\r\n            } else if (evt.keyCode === this.Keycodes_.SPACE || evt.keyCode === this.Keycodes_.ENTER) {\r\n                evt.preventDefault();\r\n                // Send mousedown and mouseup to trigger ripple.\r\n                var e = new MouseEvent('mousedown');\r\n                evt.target.dispatchEvent(e);\r\n                e = new MouseEvent('mouseup');\r\n                evt.target.dispatchEvent(e);\r\n                // Send click.\r\n                evt.target.click();\r\n            } else if (evt.keyCode === this.Keycodes_.ESCAPE) {\r\n                evt.preventDefault();\r\n                this.hide();\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n   * Handles a click event on an item.\r\n   *\r\n   * @param {Event} evt The event that fired.\r\n   * @private\r\n   */\r\nMaterialMenu.prototype.handleItemClick_ = function (evt) {\r\n    if (evt.target.hasAttribute('disabled')) {\r\n        evt.stopPropagation();\r\n    } else {\r\n        // Wait some time before closing menu, so the user can see the ripple.\r\n        this.closing_ = true;\r\n        window.setTimeout(function (evt) {\r\n            this.hide();\r\n            this.closing_ = false;\r\n        }.bind(this), this.Constant_.CLOSE_TIMEOUT);\r\n    }\r\n};\r\n/**\r\n   * Calculates the initial clip (for opening the menu) or final clip (for closing\r\n   * it), and applies it. This allows us to animate from or to the correct point,\r\n   * that is, the point it's aligned to in the \"for\" element.\r\n   *\r\n   * @param {number} height Height of the clip rectangle\r\n   * @param {number} width Width of the clip rectangle\r\n   * @private\r\n   */\r\nMaterialMenu.prototype.applyClip_ = function (height, width) {\r\n    if (this.element_.classList.contains(this.CssClasses_.UNALIGNED)) {\r\n        // Do not clip.\r\n        this.element_.style.clip = '';\r\n    } else if (this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)) {\r\n        // Clip to the top right corner of the menu.\r\n        this.element_.style.clip = 'rect(0 ' + width + 'px ' + '0 ' + width + 'px)';\r\n    } else if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT)) {\r\n        // Clip to the bottom left corner of the menu.\r\n        this.element_.style.clip = 'rect(' + height + 'px 0 ' + height + 'px 0)';\r\n    } else if (this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {\r\n        // Clip to the bottom right corner of the menu.\r\n        this.element_.style.clip = 'rect(' + height + 'px ' + width + 'px ' + height + 'px ' + width + 'px)';\r\n    } else {\r\n        // Default: do not clip (same as clipping to the top left corner).\r\n        this.element_.style.clip = '';\r\n    }\r\n};\r\n/**\r\n   * Cleanup function to remove animation listeners.\r\n   *\r\n   * @param {Event} evt\r\n   * @private\r\n   */\r\nMaterialMenu.prototype.removeAnimationEndListener_ = function (evt) {\r\n    evt.target.classList.remove(MaterialMenu.prototype.CssClasses_.IS_ANIMATING);\r\n};\r\n/**\r\n   * Adds an event listener to clean up after the animation ends.\r\n   *\r\n   * @private\r\n   */\r\nMaterialMenu.prototype.addAnimationEndListener_ = function () {\r\n    this.element_.addEventListener('transitionend', this.removeAnimationEndListener_);\r\n    this.element_.addEventListener('webkitTransitionEnd', this.removeAnimationEndListener_);\r\n};\r\n/**\r\n   * Displays the menu.\r\n   *\r\n   * @public\r\n   */\r\nMaterialMenu.prototype.show = function (evt) {\r\n    if (this.element_ && this.container_ && this.outline_) {\r\n        // Measure the inner element.\r\n        var height = this.element_.getBoundingClientRect().height;\r\n        var width = this.element_.getBoundingClientRect().width;\r\n        // Apply the inner element's size to the container and outline.\r\n        this.container_.style.width = width + 'px';\r\n        this.container_.style.height = height + 'px';\r\n        this.outline_.style.width = width + 'px';\r\n        this.outline_.style.height = height + 'px';\r\n        var transitionDuration = this.Constant_.TRANSITION_DURATION_SECONDS * this.Constant_.TRANSITION_DURATION_FRACTION;\r\n        // Calculate transition delays for individual menu items, so that they fade\r\n        // in one at a time.\r\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM);\r\n        for (var i = 0; i < items.length; i++) {\r\n            var itemDelay = null;\r\n            if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT) || this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {\r\n                itemDelay = (height - items[i].offsetTop - items[i].offsetHeight) / height * transitionDuration + 's';\r\n            } else {\r\n                itemDelay = items[i].offsetTop / height * transitionDuration + 's';\r\n            }\r\n            items[i].style.transitionDelay = itemDelay;\r\n        }\r\n        // Apply the initial clip to the text before we start animating.\r\n        this.applyClip_(height, width);\r\n        // Wait for the next frame, turn on animation, and apply the final clip.\r\n        // Also make it visible. This triggers the transitions.\r\n        window.requestAnimationFrame(function () {\r\n            this.element_.classList.add(this.CssClasses_.IS_ANIMATING);\r\n            this.element_.style.clip = 'rect(0 ' + width + 'px ' + height + 'px 0)';\r\n            this.container_.classList.add(this.CssClasses_.IS_VISIBLE);\r\n        }.bind(this));\r\n        // Clean up after the animation is complete.\r\n        this.addAnimationEndListener_();\r\n        // Add a click listener to the document, to close the menu.\r\n        var callback = function (e) {\r\n            // Check to see if the document is processing the same event that\r\n            // displayed the menu in the first place. If so, do nothing.\r\n            // Also check to see if the menu is in the process of closing itself, and\r\n            // do nothing in that case.\r\n            // Also check if the clicked element is a menu item\r\n            // if so, do nothing.\r\n            if (e !== evt && !this.closing_ && e.target.parentNode !== this.element_) {\r\n                document.removeEventListener('click', callback);\r\n                this.hide();\r\n            }\r\n        }.bind(this);\r\n        document.addEventListener('click', callback);\r\n    }\r\n};\r\nMaterialMenu.prototype['show'] = MaterialMenu.prototype.show;\r\n/**\r\n   * Hides the menu.\r\n   *\r\n   * @public\r\n   */\r\nMaterialMenu.prototype.hide = function () {\r\n    if (this.element_ && this.container_ && this.outline_) {\r\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM);\r\n        // Remove all transition delays; menu items fade out concurrently.\r\n        for (var i = 0; i < items.length; i++) {\r\n            items[i].style.removeProperty('transition-delay');\r\n        }\r\n        // Measure the inner element.\r\n        var rect = this.element_.getBoundingClientRect();\r\n        var height = rect.height;\r\n        var width = rect.width;\r\n        // Turn on animation, and apply the final clip. Also make invisible.\r\n        // This triggers the transitions.\r\n        this.element_.classList.add(this.CssClasses_.IS_ANIMATING);\r\n        this.applyClip_(height, width);\r\n        this.container_.classList.remove(this.CssClasses_.IS_VISIBLE);\r\n        // Clean up after the animation is complete.\r\n        this.addAnimationEndListener_();\r\n    }\r\n};\r\nMaterialMenu.prototype['hide'] = MaterialMenu.prototype.hide;\r\n/**\r\n   * Displays or hides the menu, depending on current state.\r\n   *\r\n   * @public\r\n   */\r\nMaterialMenu.prototype.toggle = function (evt) {\r\n    if (this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)) {\r\n        this.hide();\r\n    } else {\r\n        this.show(evt);\r\n    }\r\n};\r\nMaterialMenu.prototype['toggle'] = MaterialMenu.prototype.toggle;\r\n// The component registers itself. It can assume componentHandler is available\r\n// in the global scope.\r\ncomponentHandler.register({\r\n    constructor: MaterialMenu,\r\n    classAsString: 'MaterialMenu',\r\n    cssClass: 'mdl-js-menu',\r\n    widget: true\r\n});\r\n/**\r\n * @license\r\n * Copyright 2015 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n   * Class constructor for Progress MDL component.\r\n   * Implements MDL component design pattern defined at:\r\n   * https://github.com/jasonmayes/mdl-component-design-pattern\r\n   *\r\n   * @constructor\r\n   * @param {HTMLElement} element The element that will be upgraded.\r\n   */\r\nvar MaterialProgress = function MaterialProgress(element) {\r\n    this.element_ = element;\r\n    // Initialize instance.\r\n    this.init();\r\n};\r\nwindow['MaterialProgress'] = MaterialProgress;\r\n/**\r\n   * Store constants in one place so they can be updated easily.\r\n   *\r\n   * @enum {string | number}\r\n   * @private\r\n   */\r\nMaterialProgress.prototype.Constant_ = {};\r\n/**\r\n   * Store strings for class names defined by this component that are used in\r\n   * JavaScript. This allows us to simply change it in one place should we\r\n   * decide to modify at a later date.\r\n   *\r\n   * @enum {string}\r\n   * @private\r\n   */\r\nMaterialProgress.prototype.CssClasses_ = { INDETERMINATE_CLASS: 'mdl-progress__indeterminate' };\r\n/**\r\n   * Set the current progress of the progressbar.\r\n   *\r\n   * @param {number} p Percentage of the progress (0-100)\r\n   * @public\r\n   */\r\nMaterialProgress.prototype.setProgress = function (p) {\r\n    if (this.element_.classList.contains(this.CssClasses_.INDETERMINATE_CLASS)) {\r\n        return;\r\n    }\r\n    this.progressbar_.style.width = p + '%';\r\n};\r\nMaterialProgress.prototype['setProgress'] = MaterialProgress.prototype.setProgress;\r\n/**\r\n   * Set the current progress of the buffer.\r\n   *\r\n   * @param {number} p Percentage of the buffer (0-100)\r\n   * @public\r\n   */\r\nMaterialProgress.prototype.setBuffer = function (p) {\r\n    this.bufferbar_.style.width = p + '%';\r\n    this.auxbar_.style.width = 100 - p + '%';\r\n};\r\nMaterialProgress.prototype['setBuffer'] = MaterialProgress.prototype.setBuffer;\r\n/**\r\n   * Initialize element.\r\n   */\r\nMaterialProgress.prototype.init = function () {\r\n    if (this.element_) {\r\n        var el = document.createElement('div');\r\n        el.className = 'progressbar bar bar1';\r\n        this.element_.appendChild(el);\r\n        this.progressbar_ = el;\r\n        el = document.createElement('div');\r\n        el.className = 'bufferbar bar bar2';\r\n        this.element_.appendChild(el);\r\n        this.bufferbar_ = el;\r\n        el = document.createElement('div');\r\n        el.className = 'auxbar bar bar3';\r\n        this.element_.appendChild(el);\r\n        this.auxbar_ = el;\r\n        this.progressbar_.style.width = '0%';\r\n        this.bufferbar_.style.width = '100%';\r\n        this.auxbar_.style.width = '0%';\r\n        this.element_.classList.add('is-upgraded');\r\n    }\r\n};\r\n// The component registers itself. It can assume componentHandler is available\r\n// in the global scope.\r\ncomponentHandler.register({\r\n    constructor: MaterialProgress,\r\n    classAsString: 'MaterialProgress',\r\n    cssClass: 'mdl-js-progress',\r\n    widget: true\r\n});\r\n/**\r\n * @license\r\n * Copyright 2015 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n   * Class constructor for Radio MDL component.\r\n   * Implements MDL component design pattern defined at:\r\n   * https://github.com/jasonmayes/mdl-component-design-pattern\r\n   *\r\n   * @constructor\r\n   * @param {HTMLElement} element The element that will be upgraded.\r\n   */\r\nvar MaterialRadio = function MaterialRadio(element) {\r\n    this.element_ = element;\r\n    // Initialize instance.\r\n    this.init();\r\n};\r\nwindow['MaterialRadio'] = MaterialRadio;\r\n/**\r\n   * Store constants in one place so they can be updated easily.\r\n   *\r\n   * @enum {string | number}\r\n   * @private\r\n   */\r\nMaterialRadio.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };\r\n/**\r\n   * Store strings for class names defined by this component that are used in\r\n   * JavaScript. This allows us to simply change it in one place should we\r\n   * decide to modify at a later date.\r\n   *\r\n   * @enum {string}\r\n   * @private\r\n   */\r\nMaterialRadio.prototype.CssClasses_ = {\r\n    IS_FOCUSED: 'is-focused',\r\n    IS_DISABLED: 'is-disabled',\r\n    IS_CHECKED: 'is-checked',\r\n    IS_UPGRADED: 'is-upgraded',\r\n    JS_RADIO: 'mdl-js-radio',\r\n    RADIO_BTN: 'mdl-radio__button',\r\n    RADIO_OUTER_CIRCLE: 'mdl-radio__outer-circle',\r\n    RADIO_INNER_CIRCLE: 'mdl-radio__inner-circle',\r\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\r\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\r\n    RIPPLE_CONTAINER: 'mdl-radio__ripple-container',\r\n    RIPPLE_CENTER: 'mdl-ripple--center',\r\n    RIPPLE: 'mdl-ripple'\r\n};\r\n/**\r\n   * Handle change of state.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\nMaterialRadio.prototype.onChange_ = function (event) {\r\n    // Since other radio buttons don't get change events, we need to look for\r\n    // them to update their classes.\r\n    var radios = document.getElementsByClassName(this.CssClasses_.JS_RADIO);\r\n    for (var i = 0; i < radios.length; i++) {\r\n        var button = radios[i].querySelector('.' + this.CssClasses_.RADIO_BTN);\r\n        // Different name == different group, so no point updating those.\r\n        if (button.getAttribute('name') === this.btnElement_.getAttribute('name')) {\r\n            radios[i]['MaterialRadio'].updateClasses_();\r\n        }\r\n    }\r\n};\r\n/**\r\n   * Handle focus.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\nMaterialRadio.prototype.onFocus_ = function (event) {\r\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\r\n};\r\n/**\r\n   * Handle lost focus.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\nMaterialRadio.prototype.onBlur_ = function (event) {\r\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\r\n};\r\n/**\r\n   * Handle mouseup.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\nMaterialRadio.prototype.onMouseup_ = function (event) {\r\n    this.blur_();\r\n};\r\n/**\r\n   * Update classes.\r\n   *\r\n   * @private\r\n   */\r\nMaterialRadio.prototype.updateClasses_ = function () {\r\n    this.checkDisabled();\r\n    this.checkToggleState();\r\n};\r\n/**\r\n   * Add blur.\r\n   *\r\n   * @private\r\n   */\r\nMaterialRadio.prototype.blur_ = function () {\r\n    // TODO: figure out why there's a focus event being fired after our blur,\r\n    // so that we can avoid this hack.\r\n    window.setTimeout(function () {\r\n        this.btnElement_.blur();\r\n    }.bind(this), this.Constant_.TINY_TIMEOUT);\r\n};\r\n// Public methods.\r\n/**\r\n   * Check the components disabled state.\r\n   *\r\n   * @public\r\n   */\r\nMaterialRadio.prototype.checkDisabled = function () {\r\n    if (this.btnElement_.disabled) {\r\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);\r\n    } else {\r\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\r\n    }\r\n};\r\nMaterialRadio.prototype['checkDisabled'] = MaterialRadio.prototype.checkDisabled;\r\n/**\r\n   * Check the components toggled state.\r\n   *\r\n   * @public\r\n   */\r\nMaterialRadio.prototype.checkToggleState = function () {\r\n    if (this.btnElement_.checked) {\r\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);\r\n    } else {\r\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);\r\n    }\r\n};\r\nMaterialRadio.prototype['checkToggleState'] = MaterialRadio.prototype.checkToggleState;\r\n/**\r\n   * Disable radio.\r\n   *\r\n   * @public\r\n   */\r\nMaterialRadio.prototype.disable = function () {\r\n    this.btnElement_.disabled = true;\r\n    this.updateClasses_();\r\n};\r\nMaterialRadio.prototype['disable'] = MaterialRadio.prototype.disable;\r\n/**\r\n   * Enable radio.\r\n   *\r\n   * @public\r\n   */\r\nMaterialRadio.prototype.enable = function () {\r\n    this.btnElement_.disabled = false;\r\n    this.updateClasses_();\r\n};\r\nMaterialRadio.prototype['enable'] = MaterialRadio.prototype.enable;\r\n/**\r\n   * Check radio.\r\n   *\r\n   * @public\r\n   */\r\nMaterialRadio.prototype.check = function () {\r\n    this.btnElement_.checked = true;\r\n    this.onChange_(null);\r\n};\r\nMaterialRadio.prototype['check'] = MaterialRadio.prototype.check;\r\n/**\r\n   * Uncheck radio.\r\n   *\r\n   * @public\r\n   */\r\nMaterialRadio.prototype.uncheck = function () {\r\n    this.btnElement_.checked = false;\r\n    this.onChange_(null);\r\n};\r\nMaterialRadio.prototype['uncheck'] = MaterialRadio.prototype.uncheck;\r\n/**\r\n   * Initialize element.\r\n   */\r\nMaterialRadio.prototype.init = function () {\r\n    if (this.element_) {\r\n        this.btnElement_ = this.element_.querySelector('.' + this.CssClasses_.RADIO_BTN);\r\n        this.boundChangeHandler_ = this.onChange_.bind(this);\r\n        this.boundFocusHandler_ = this.onChange_.bind(this);\r\n        this.boundBlurHandler_ = this.onBlur_.bind(this);\r\n        this.boundMouseUpHandler_ = this.onMouseup_.bind(this);\r\n        var outerCircle = document.createElement('span');\r\n        outerCircle.classList.add(this.CssClasses_.RADIO_OUTER_CIRCLE);\r\n        var innerCircle = document.createElement('span');\r\n        innerCircle.classList.add(this.CssClasses_.RADIO_INNER_CIRCLE);\r\n        this.element_.appendChild(outerCircle);\r\n        this.element_.appendChild(innerCircle);\r\n        var rippleContainer;\r\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\r\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\r\n            rippleContainer = document.createElement('span');\r\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\r\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_EFFECT);\r\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_CENTER);\r\n            rippleContainer.addEventListener('mouseup', this.boundMouseUpHandler_);\r\n            var ripple = document.createElement('span');\r\n            ripple.classList.add(this.CssClasses_.RIPPLE);\r\n            rippleContainer.appendChild(ripple);\r\n            this.element_.appendChild(rippleContainer);\r\n        }\r\n        this.btnElement_.addEventListener('change', this.boundChangeHandler_);\r\n        this.btnElement_.addEventListener('focus', this.boundFocusHandler_);\r\n        this.btnElement_.addEventListener('blur', this.boundBlurHandler_);\r\n        this.element_.addEventListener('mouseup', this.boundMouseUpHandler_);\r\n        this.updateClasses_();\r\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\r\n    }\r\n};\r\n// The component registers itself. It can assume componentHandler is available\r\n// in the global scope.\r\ncomponentHandler.register({\r\n    constructor: MaterialRadio,\r\n    classAsString: 'MaterialRadio',\r\n    cssClass: 'mdl-js-radio',\r\n    widget: true\r\n});\r\n/**\r\n * @license\r\n * Copyright 2015 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n   * Class constructor for Slider MDL component.\r\n   * Implements MDL component design pattern defined at:\r\n   * https://github.com/jasonmayes/mdl-component-design-pattern\r\n   *\r\n   * @constructor\r\n   * @param {HTMLElement} element The element that will be upgraded.\r\n   */\r\nvar MaterialSlider = function MaterialSlider(element) {\r\n    this.element_ = element;\r\n    // Browser feature detection.\r\n    this.isIE_ = window.navigator.msPointerEnabled;\r\n    // Initialize instance.\r\n    this.init();\r\n};\r\nwindow['MaterialSlider'] = MaterialSlider;\r\n/**\r\n   * Store constants in one place so they can be updated easily.\r\n   *\r\n   * @enum {string | number}\r\n   * @private\r\n   */\r\nMaterialSlider.prototype.Constant_ = {};\r\n/**\r\n   * Store strings for class names defined by this component that are used in\r\n   * JavaScript. This allows us to simply change it in one place should we\r\n   * decide to modify at a later date.\r\n   *\r\n   * @enum {string}\r\n   * @private\r\n   */\r\nMaterialSlider.prototype.CssClasses_ = {\r\n    IE_CONTAINER: 'mdl-slider__ie-container',\r\n    SLIDER_CONTAINER: 'mdl-slider__container',\r\n    BACKGROUND_FLEX: 'mdl-slider__background-flex',\r\n    BACKGROUND_LOWER: 'mdl-slider__background-lower',\r\n    BACKGROUND_UPPER: 'mdl-slider__background-upper',\r\n    IS_LOWEST_VALUE: 'is-lowest-value',\r\n    IS_UPGRADED: 'is-upgraded'\r\n};\r\n/**\r\n   * Handle input on element.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\nMaterialSlider.prototype.onInput_ = function (event) {\r\n    this.updateValueStyles_();\r\n};\r\n/**\r\n   * Handle change on element.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\nMaterialSlider.prototype.onChange_ = function (event) {\r\n    this.updateValueStyles_();\r\n};\r\n/**\r\n   * Handle mouseup on element.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\nMaterialSlider.prototype.onMouseUp_ = function (event) {\r\n    event.target.blur();\r\n};\r\n/**\r\n   * Handle mousedown on container element.\r\n   * This handler is purpose is to not require the use to click\r\n   * exactly on the 2px slider element, as FireFox seems to be very\r\n   * strict about this.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   * @suppress {missingProperties}\r\n   */\r\nMaterialSlider.prototype.onContainerMouseDown_ = function (event) {\r\n    // If this click is not on the parent element (but rather some child)\r\n    // ignore. It may still bubble up.\r\n    if (event.target !== this.element_.parentElement) {\r\n        return;\r\n    }\r\n    // Discard the original event and create a new event that\r\n    // is on the slider element.\r\n    event.preventDefault();\r\n    var newEvent = new MouseEvent('mousedown', {\r\n        target: event.target,\r\n        buttons: event.buttons,\r\n        clientX: event.clientX,\r\n        clientY: this.element_.getBoundingClientRect().y\r\n    });\r\n    this.element_.dispatchEvent(newEvent);\r\n};\r\n/**\r\n   * Handle updating of values.\r\n   *\r\n   * @private\r\n   */\r\nMaterialSlider.prototype.updateValueStyles_ = function () {\r\n    // Calculate and apply percentages to div structure behind slider.\r\n    var fraction = (this.element_.value - this.element_.min) / (this.element_.max - this.element_.min);\r\n    if (fraction === 0) {\r\n        this.element_.classList.add(this.CssClasses_.IS_LOWEST_VALUE);\r\n    } else {\r\n        this.element_.classList.remove(this.CssClasses_.IS_LOWEST_VALUE);\r\n    }\r\n    if (!this.isIE_) {\r\n        this.backgroundLower_.style.flex = fraction;\r\n        this.backgroundLower_.style.webkitFlex = fraction;\r\n        this.backgroundUpper_.style.flex = 1 - fraction;\r\n        this.backgroundUpper_.style.webkitFlex = 1 - fraction;\r\n    }\r\n};\r\n// Public methods.\r\n/**\r\n   * Disable slider.\r\n   *\r\n   * @public\r\n   */\r\nMaterialSlider.prototype.disable = function () {\r\n    this.element_.disabled = true;\r\n};\r\nMaterialSlider.prototype['disable'] = MaterialSlider.prototype.disable;\r\n/**\r\n   * Enable slider.\r\n   *\r\n   * @public\r\n   */\r\nMaterialSlider.prototype.enable = function () {\r\n    this.element_.disabled = false;\r\n};\r\nMaterialSlider.prototype['enable'] = MaterialSlider.prototype.enable;\r\n/**\r\n   * Update slider value.\r\n   *\r\n   * @param {number} value The value to which to set the control (optional).\r\n   * @public\r\n   */\r\nMaterialSlider.prototype.change = function (value) {\r\n    if (typeof value !== 'undefined') {\r\n        this.element_.value = value;\r\n    }\r\n    this.updateValueStyles_();\r\n};\r\nMaterialSlider.prototype['change'] = MaterialSlider.prototype.change;\r\n/**\r\n   * Initialize element.\r\n   */\r\nMaterialSlider.prototype.init = function () {\r\n    if (this.element_) {\r\n        if (this.isIE_) {\r\n            // Since we need to specify a very large height in IE due to\r\n            // implementation limitations, we add a parent here that trims it down to\r\n            // a reasonable size.\r\n            var containerIE = document.createElement('div');\r\n            containerIE.classList.add(this.CssClasses_.IE_CONTAINER);\r\n            this.element_.parentElement.insertBefore(containerIE, this.element_);\r\n            this.element_.parentElement.removeChild(this.element_);\r\n            containerIE.appendChild(this.element_);\r\n        } else {\r\n            // For non-IE browsers, we need a div structure that sits behind the\r\n            // slider and allows us to style the left and right sides of it with\r\n            // different colors.\r\n            var container = document.createElement('div');\r\n            container.classList.add(this.CssClasses_.SLIDER_CONTAINER);\r\n            this.element_.parentElement.insertBefore(container, this.element_);\r\n            this.element_.parentElement.removeChild(this.element_);\r\n            container.appendChild(this.element_);\r\n            var backgroundFlex = document.createElement('div');\r\n            backgroundFlex.classList.add(this.CssClasses_.BACKGROUND_FLEX);\r\n            container.appendChild(backgroundFlex);\r\n            this.backgroundLower_ = document.createElement('div');\r\n            this.backgroundLower_.classList.add(this.CssClasses_.BACKGROUND_LOWER);\r\n            backgroundFlex.appendChild(this.backgroundLower_);\r\n            this.backgroundUpper_ = document.createElement('div');\r\n            this.backgroundUpper_.classList.add(this.CssClasses_.BACKGROUND_UPPER);\r\n            backgroundFlex.appendChild(this.backgroundUpper_);\r\n        }\r\n        this.boundInputHandler = this.onInput_.bind(this);\r\n        this.boundChangeHandler = this.onChange_.bind(this);\r\n        this.boundMouseUpHandler = this.onMouseUp_.bind(this);\r\n        this.boundContainerMouseDownHandler = this.onContainerMouseDown_.bind(this);\r\n        this.element_.addEventListener('input', this.boundInputHandler);\r\n        this.element_.addEventListener('change', this.boundChangeHandler);\r\n        this.element_.addEventListener('mouseup', this.boundMouseUpHandler);\r\n        this.element_.parentElement.addEventListener('mousedown', this.boundContainerMouseDownHandler);\r\n        this.updateValueStyles_();\r\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\r\n    }\r\n};\r\n// The component registers itself. It can assume componentHandler is available\r\n// in the global scope.\r\ncomponentHandler.register({\r\n    constructor: MaterialSlider,\r\n    classAsString: 'MaterialSlider',\r\n    cssClass: 'mdl-js-slider',\r\n    widget: true\r\n});\r\n/**\r\n * Copyright 2015 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n   * Class constructor for Snackbar MDL component.\r\n   * Implements MDL component design pattern defined at:\r\n   * https://github.com/jasonmayes/mdl-component-design-pattern\r\n   *\r\n   * @constructor\r\n   * @param {HTMLElement} element The element that will be upgraded.\r\n   */\r\nvar MaterialSnackbar = function MaterialSnackbar(element) {\r\n    this.element_ = element;\r\n    this.textElement_ = this.element_.querySelector('.' + this.cssClasses_.MESSAGE);\r\n    this.actionElement_ = this.element_.querySelector('.' + this.cssClasses_.ACTION);\r\n    if (!this.textElement_) {\r\n        throw new Error('There must be a message element for a snackbar.');\r\n    }\r\n    if (!this.actionElement_) {\r\n        throw new Error('There must be an action element for a snackbar.');\r\n    }\r\n    this.active = false;\r\n    this.actionHandler_ = undefined;\r\n    this.message_ = undefined;\r\n    this.actionText_ = undefined;\r\n    this.queuedNotifications_ = [];\r\n    this.setActionHidden_(true);\r\n};\r\nwindow['MaterialSnackbar'] = MaterialSnackbar;\r\n/**\r\n   * Store constants in one place so they can be updated easily.\r\n   *\r\n   * @enum {string | number}\r\n   * @private\r\n   */\r\nMaterialSnackbar.prototype.Constant_ = {\r\n    // The duration of the snackbar show/hide animation, in ms.\r\n    ANIMATION_LENGTH: 250\r\n};\r\n/**\r\n   * Store strings for class names defined by this component that are used in\r\n   * JavaScript. This allows us to simply change it in one place should we\r\n   * decide to modify at a later date.\r\n   *\r\n   * @enum {string}\r\n   * @private\r\n   */\r\nMaterialSnackbar.prototype.cssClasses_ = {\r\n    SNACKBAR: 'mdl-snackbar',\r\n    MESSAGE: 'mdl-snackbar__text',\r\n    ACTION: 'mdl-snackbar__action',\r\n    ACTIVE: 'mdl-snackbar--active'\r\n};\r\n/**\r\n   * Display the snackbar.\r\n   *\r\n   * @private\r\n   */\r\nMaterialSnackbar.prototype.displaySnackbar_ = function () {\r\n    this.element_.setAttribute('aria-hidden', 'true');\r\n    if (this.actionHandler_) {\r\n        this.actionElement_.textContent = this.actionText_;\r\n        this.actionElement_.addEventListener('click', this.actionHandler_);\r\n        this.setActionHidden_(false);\r\n    }\r\n    this.textElement_.textContent = this.message_;\r\n    this.element_.classList.add(this.cssClasses_.ACTIVE);\r\n    this.element_.setAttribute('aria-hidden', 'false');\r\n    setTimeout(this.cleanup_.bind(this), this.timeout_);\r\n};\r\n/**\r\n   * Show the snackbar.\r\n   *\r\n   * @param {Object} data The data for the notification.\r\n   * @public\r\n   */\r\nMaterialSnackbar.prototype.showSnackbar = function (data) {\r\n    if (data === undefined) {\r\n        throw new Error('Please provide a data object with at least a message to display.');\r\n    }\r\n    if (data['message'] === undefined) {\r\n        throw new Error('Please provide a message to be displayed.');\r\n    }\r\n    if (data['actionHandler'] && !data['actionText']) {\r\n        throw new Error('Please provide action text with the handler.');\r\n    }\r\n    if (this.active) {\r\n        this.queuedNotifications_.push(data);\r\n    } else {\r\n        this.active = true;\r\n        this.message_ = data['message'];\r\n        if (data['timeout']) {\r\n            this.timeout_ = data['timeout'];\r\n        } else {\r\n            this.timeout_ = 2750;\r\n        }\r\n        if (data['actionHandler']) {\r\n            this.actionHandler_ = data['actionHandler'];\r\n        }\r\n        if (data['actionText']) {\r\n            this.actionText_ = data['actionText'];\r\n        }\r\n        this.displaySnackbar_();\r\n    }\r\n};\r\nMaterialSnackbar.prototype['showSnackbar'] = MaterialSnackbar.prototype.showSnackbar;\r\n/**\r\n   * Check if the queue has items within it.\r\n   * If it does, display the next entry.\r\n   *\r\n   * @private\r\n   */\r\nMaterialSnackbar.prototype.checkQueue_ = function () {\r\n    if (this.queuedNotifications_.length > 0) {\r\n        this.showSnackbar(this.queuedNotifications_.shift());\r\n    }\r\n};\r\n/**\r\n   * Cleanup the snackbar event listeners and accessiblity attributes.\r\n   *\r\n   * @private\r\n   */\r\nMaterialSnackbar.prototype.cleanup_ = function () {\r\n    this.element_.classList.remove(this.cssClasses_.ACTIVE);\r\n    setTimeout(function () {\r\n        this.element_.setAttribute('aria-hidden', 'true');\r\n        this.textElement_.textContent = '';\r\n        if (!Boolean(this.actionElement_.getAttribute('aria-hidden'))) {\r\n            this.setActionHidden_(true);\r\n            this.actionElement_.textContent = '';\r\n            this.actionElement_.removeEventListener('click', this.actionHandler_);\r\n        }\r\n        this.actionHandler_ = undefined;\r\n        this.message_ = undefined;\r\n        this.actionText_ = undefined;\r\n        this.active = false;\r\n        this.checkQueue_();\r\n    }.bind(this), this.Constant_.ANIMATION_LENGTH);\r\n};\r\n/**\r\n   * Set the action handler hidden state.\r\n   *\r\n   * @param {boolean} value\r\n   * @private\r\n   */\r\nMaterialSnackbar.prototype.setActionHidden_ = function (value) {\r\n    if (value) {\r\n        this.actionElement_.setAttribute('aria-hidden', 'true');\r\n    } else {\r\n        this.actionElement_.removeAttribute('aria-hidden');\r\n    }\r\n};\r\n// The component registers itself. It can assume componentHandler is available\r\n// in the global scope.\r\ncomponentHandler.register({\r\n    constructor: MaterialSnackbar,\r\n    classAsString: 'MaterialSnackbar',\r\n    cssClass: 'mdl-js-snackbar',\r\n    widget: true\r\n});\r\n/**\r\n * @license\r\n * Copyright 2015 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n   * Class constructor for Spinner MDL component.\r\n   * Implements MDL component design pattern defined at:\r\n   * https://github.com/jasonmayes/mdl-component-design-pattern\r\n   *\r\n   * @param {HTMLElement} element The element that will be upgraded.\r\n   * @constructor\r\n   */\r\nvar MaterialSpinner = function MaterialSpinner(element) {\r\n    this.element_ = element;\r\n    // Initialize instance.\r\n    this.init();\r\n};\r\nwindow['MaterialSpinner'] = MaterialSpinner;\r\n/**\r\n   * Store constants in one place so they can be updated easily.\r\n   *\r\n   * @enum {string | number}\r\n   * @private\r\n   */\r\nMaterialSpinner.prototype.Constant_ = { MDL_SPINNER_LAYER_COUNT: 4 };\r\n/**\r\n   * Store strings for class names defined by this component that are used in\r\n   * JavaScript. This allows us to simply change it in one place should we\r\n   * decide to modify at a later date.\r\n   *\r\n   * @enum {string}\r\n   * @private\r\n   */\r\nMaterialSpinner.prototype.CssClasses_ = {\r\n    MDL_SPINNER_LAYER: 'mdl-spinner__layer',\r\n    MDL_SPINNER_CIRCLE_CLIPPER: 'mdl-spinner__circle-clipper',\r\n    MDL_SPINNER_CIRCLE: 'mdl-spinner__circle',\r\n    MDL_SPINNER_GAP_PATCH: 'mdl-spinner__gap-patch',\r\n    MDL_SPINNER_LEFT: 'mdl-spinner__left',\r\n    MDL_SPINNER_RIGHT: 'mdl-spinner__right'\r\n};\r\n/**\r\n   * Auxiliary method to create a spinner layer.\r\n   *\r\n   * @param {number} index Index of the layer to be created.\r\n   * @public\r\n   */\r\nMaterialSpinner.prototype.createLayer = function (index) {\r\n    var layer = document.createElement('div');\r\n    layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER);\r\n    layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER + '-' + index);\r\n    var leftClipper = document.createElement('div');\r\n    leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);\r\n    leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_LEFT);\r\n    var gapPatch = document.createElement('div');\r\n    gapPatch.classList.add(this.CssClasses_.MDL_SPINNER_GAP_PATCH);\r\n    var rightClipper = document.createElement('div');\r\n    rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);\r\n    rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_RIGHT);\r\n    var circleOwners = [\r\n        leftClipper,\r\n        gapPatch,\r\n        rightClipper\r\n    ];\r\n    for (var i = 0; i < circleOwners.length; i++) {\r\n        var circle = document.createElement('div');\r\n        circle.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE);\r\n        circleOwners[i].appendChild(circle);\r\n    }\r\n    layer.appendChild(leftClipper);\r\n    layer.appendChild(gapPatch);\r\n    layer.appendChild(rightClipper);\r\n    this.element_.appendChild(layer);\r\n};\r\nMaterialSpinner.prototype['createLayer'] = MaterialSpinner.prototype.createLayer;\r\n/**\r\n   * Stops the spinner animation.\r\n   * Public method for users who need to stop the spinner for any reason.\r\n   *\r\n   * @public\r\n   */\r\nMaterialSpinner.prototype.stop = function () {\r\n    this.element_.classList.remove('is-active');\r\n};\r\nMaterialSpinner.prototype['stop'] = MaterialSpinner.prototype.stop;\r\n/**\r\n   * Starts the spinner animation.\r\n   * Public method for users who need to manually start the spinner for any reason\r\n   * (instead of just adding the 'is-active' class to their markup).\r\n   *\r\n   * @public\r\n   */\r\nMaterialSpinner.prototype.start = function () {\r\n    this.element_.classList.add('is-active');\r\n};\r\nMaterialSpinner.prototype['start'] = MaterialSpinner.prototype.start;\r\n/**\r\n   * Initialize element.\r\n   */\r\nMaterialSpinner.prototype.init = function () {\r\n    if (this.element_) {\r\n        for (var i = 1; i <= this.Constant_.MDL_SPINNER_LAYER_COUNT; i++) {\r\n            this.createLayer(i);\r\n        }\r\n        this.element_.classList.add('is-upgraded');\r\n    }\r\n};\r\n// The component registers itself. It can assume componentHandler is available\r\n// in the global scope.\r\ncomponentHandler.register({\r\n    constructor: MaterialSpinner,\r\n    classAsString: 'MaterialSpinner',\r\n    cssClass: 'mdl-js-spinner',\r\n    widget: true\r\n});\r\n/**\r\n * @license\r\n * Copyright 2015 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n   * Class constructor for Checkbox MDL component.\r\n   * Implements MDL component design pattern defined at:\r\n   * https://github.com/jasonmayes/mdl-component-design-pattern\r\n   *\r\n   * @constructor\r\n   * @param {HTMLElement} element The element that will be upgraded.\r\n   */\r\nvar MaterialSwitch = function MaterialSwitch(element) {\r\n    this.element_ = element;\r\n    // Initialize instance.\r\n    this.init();\r\n};\r\nwindow['MaterialSwitch'] = MaterialSwitch;\r\n/**\r\n   * Store constants in one place so they can be updated easily.\r\n   *\r\n   * @enum {string | number}\r\n   * @private\r\n   */\r\nMaterialSwitch.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };\r\n/**\r\n   * Store strings for class names defined by this component that are used in\r\n   * JavaScript. This allows us to simply change it in one place should we\r\n   * decide to modify at a later date.\r\n   *\r\n   * @enum {string}\r\n   * @private\r\n   */\r\nMaterialSwitch.prototype.CssClasses_ = {\r\n    INPUT: 'mdl-switch__input',\r\n    TRACK: 'mdl-switch__track',\r\n    THUMB: 'mdl-switch__thumb',\r\n    FOCUS_HELPER: 'mdl-switch__focus-helper',\r\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\r\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\r\n    RIPPLE_CONTAINER: 'mdl-switch__ripple-container',\r\n    RIPPLE_CENTER: 'mdl-ripple--center',\r\n    RIPPLE: 'mdl-ripple',\r\n    IS_FOCUSED: 'is-focused',\r\n    IS_DISABLED: 'is-disabled',\r\n    IS_CHECKED: 'is-checked'\r\n};\r\n/**\r\n   * Handle change of state.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\nMaterialSwitch.prototype.onChange_ = function (event) {\r\n    this.updateClasses_();\r\n};\r\n/**\r\n   * Handle focus of element.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\nMaterialSwitch.prototype.onFocus_ = function (event) {\r\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\r\n};\r\n/**\r\n   * Handle lost focus of element.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\nMaterialSwitch.prototype.onBlur_ = function (event) {\r\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\r\n};\r\n/**\r\n   * Handle mouseup.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\nMaterialSwitch.prototype.onMouseUp_ = function (event) {\r\n    this.blur_();\r\n};\r\n/**\r\n   * Handle class updates.\r\n   *\r\n   * @private\r\n   */\r\nMaterialSwitch.prototype.updateClasses_ = function () {\r\n    this.checkDisabled();\r\n    this.checkToggleState();\r\n};\r\n/**\r\n   * Add blur.\r\n   *\r\n   * @private\r\n   */\r\nMaterialSwitch.prototype.blur_ = function () {\r\n    // TODO: figure out why there's a focus event being fired after our blur,\r\n    // so that we can avoid this hack.\r\n    window.setTimeout(function () {\r\n        this.inputElement_.blur();\r\n    }.bind(this), this.Constant_.TINY_TIMEOUT);\r\n};\r\n// Public methods.\r\n/**\r\n   * Check the components disabled state.\r\n   *\r\n   * @public\r\n   */\r\nMaterialSwitch.prototype.checkDisabled = function () {\r\n    if (this.inputElement_.disabled) {\r\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);\r\n    } else {\r\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\r\n    }\r\n};\r\nMaterialSwitch.prototype['checkDisabled'] = MaterialSwitch.prototype.checkDisabled;\r\n/**\r\n   * Check the components toggled state.\r\n   *\r\n   * @public\r\n   */\r\nMaterialSwitch.prototype.checkToggleState = function () {\r\n    if (this.inputElement_.checked) {\r\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);\r\n    } else {\r\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);\r\n    }\r\n};\r\nMaterialSwitch.prototype['checkToggleState'] = MaterialSwitch.prototype.checkToggleState;\r\n/**\r\n   * Disable switch.\r\n   *\r\n   * @public\r\n   */\r\nMaterialSwitch.prototype.disable = function () {\r\n    this.inputElement_.disabled = true;\r\n    this.updateClasses_();\r\n};\r\nMaterialSwitch.prototype['disable'] = MaterialSwitch.prototype.disable;\r\n/**\r\n   * Enable switch.\r\n   *\r\n   * @public\r\n   */\r\nMaterialSwitch.prototype.enable = function () {\r\n    this.inputElement_.disabled = false;\r\n    this.updateClasses_();\r\n};\r\nMaterialSwitch.prototype['enable'] = MaterialSwitch.prototype.enable;\r\n/**\r\n   * Activate switch.\r\n   *\r\n   * @public\r\n   */\r\nMaterialSwitch.prototype.on = function () {\r\n    this.inputElement_.checked = true;\r\n    this.updateClasses_();\r\n};\r\nMaterialSwitch.prototype['on'] = MaterialSwitch.prototype.on;\r\n/**\r\n   * Deactivate switch.\r\n   *\r\n   * @public\r\n   */\r\nMaterialSwitch.prototype.off = function () {\r\n    this.inputElement_.checked = false;\r\n    this.updateClasses_();\r\n};\r\nMaterialSwitch.prototype['off'] = MaterialSwitch.prototype.off;\r\n/**\r\n   * Initialize element.\r\n   */\r\nMaterialSwitch.prototype.init = function () {\r\n    if (this.element_) {\r\n        this.inputElement_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\r\n        var track = document.createElement('div');\r\n        track.classList.add(this.CssClasses_.TRACK);\r\n        var thumb = document.createElement('div');\r\n        thumb.classList.add(this.CssClasses_.THUMB);\r\n        var focusHelper = document.createElement('span');\r\n        focusHelper.classList.add(this.CssClasses_.FOCUS_HELPER);\r\n        thumb.appendChild(focusHelper);\r\n        this.element_.appendChild(track);\r\n        this.element_.appendChild(thumb);\r\n        this.boundMouseUpHandler = this.onMouseUp_.bind(this);\r\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\r\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\r\n            this.rippleContainerElement_ = document.createElement('span');\r\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\r\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_EFFECT);\r\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);\r\n            this.rippleContainerElement_.addEventListener('mouseup', this.boundMouseUpHandler);\r\n            var ripple = document.createElement('span');\r\n            ripple.classList.add(this.CssClasses_.RIPPLE);\r\n            this.rippleContainerElement_.appendChild(ripple);\r\n            this.element_.appendChild(this.rippleContainerElement_);\r\n        }\r\n        this.boundChangeHandler = this.onChange_.bind(this);\r\n        this.boundFocusHandler = this.onFocus_.bind(this);\r\n        this.boundBlurHandler = this.onBlur_.bind(this);\r\n        this.inputElement_.addEventListener('change', this.boundChangeHandler);\r\n        this.inputElement_.addEventListener('focus', this.boundFocusHandler);\r\n        this.inputElement_.addEventListener('blur', this.boundBlurHandler);\r\n        this.element_.addEventListener('mouseup', this.boundMouseUpHandler);\r\n        this.updateClasses_();\r\n        this.element_.classList.add('is-upgraded');\r\n    }\r\n};\r\n// The component registers itself. It can assume componentHandler is available\r\n// in the global scope.\r\ncomponentHandler.register({\r\n    constructor: MaterialSwitch,\r\n    classAsString: 'MaterialSwitch',\r\n    cssClass: 'mdl-js-switch',\r\n    widget: true\r\n});\r\n/**\r\n * @license\r\n * Copyright 2015 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n   * Class constructor for Tabs MDL component.\r\n   * Implements MDL component design pattern defined at:\r\n   * https://github.com/jasonmayes/mdl-component-design-pattern\r\n   *\r\n   * @constructor\r\n   * @param {Element} element The element that will be upgraded.\r\n   */\r\nvar MaterialTabs = function MaterialTabs(element) {\r\n    // Stores the HTML element.\r\n    this.element_ = element;\r\n    // Initialize instance.\r\n    this.init();\r\n};\r\nwindow['MaterialTabs'] = MaterialTabs;\r\n/**\r\n   * Store constants in one place so they can be updated easily.\r\n   *\r\n   * @enum {string}\r\n   * @private\r\n   */\r\nMaterialTabs.prototype.Constant_ = {};\r\n/**\r\n   * Store strings for class names defined by this component that are used in\r\n   * JavaScript. This allows us to simply change it in one place should we\r\n   * decide to modify at a later date.\r\n   *\r\n   * @enum {string}\r\n   * @private\r\n   */\r\nMaterialTabs.prototype.CssClasses_ = {\r\n    TAB_CLASS: 'mdl-tabs__tab',\r\n    PANEL_CLASS: 'mdl-tabs__panel',\r\n    ACTIVE_CLASS: 'is-active',\r\n    UPGRADED_CLASS: 'is-upgraded',\r\n    MDL_JS_RIPPLE_EFFECT: 'mdl-js-ripple-effect',\r\n    MDL_RIPPLE_CONTAINER: 'mdl-tabs__ripple-container',\r\n    MDL_RIPPLE: 'mdl-ripple',\r\n    MDL_JS_RIPPLE_EFFECT_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events'\r\n};\r\n/**\r\n   * Handle clicks to a tabs component\r\n   *\r\n   * @private\r\n   */\r\nMaterialTabs.prototype.initTabs_ = function () {\r\n    if (this.element_.classList.contains(this.CssClasses_.MDL_JS_RIPPLE_EFFECT)) {\r\n        this.element_.classList.add(this.CssClasses_.MDL_JS_RIPPLE_EFFECT_IGNORE_EVENTS);\r\n    }\r\n    // Select element tabs, document panels\r\n    this.tabs_ = this.element_.querySelectorAll('.' + this.CssClasses_.TAB_CLASS);\r\n    this.panels_ = this.element_.querySelectorAll('.' + this.CssClasses_.PANEL_CLASS);\r\n    // Create new tabs for each tab element\r\n    for (var i = 0; i < this.tabs_.length; i++) {\r\n        new MaterialTab(this.tabs_[i], this);\r\n    }\r\n    this.element_.classList.add(this.CssClasses_.UPGRADED_CLASS);\r\n};\r\n/**\r\n   * Reset tab state, dropping active classes\r\n   *\r\n   * @private\r\n   */\r\nMaterialTabs.prototype.resetTabState_ = function () {\r\n    for (var k = 0; k < this.tabs_.length; k++) {\r\n        this.tabs_[k].classList.remove(this.CssClasses_.ACTIVE_CLASS);\r\n    }\r\n};\r\n/**\r\n   * Reset panel state, droping active classes\r\n   *\r\n   * @private\r\n   */\r\nMaterialTabs.prototype.resetPanelState_ = function () {\r\n    for (var j = 0; j < this.panels_.length; j++) {\r\n        this.panels_[j].classList.remove(this.CssClasses_.ACTIVE_CLASS);\r\n    }\r\n};\r\n/**\r\n   * Initialize element.\r\n   */\r\nMaterialTabs.prototype.init = function () {\r\n    if (this.element_) {\r\n        this.initTabs_();\r\n    }\r\n};\r\n/**\r\n   * Constructor for an individual tab.\r\n   *\r\n   * @constructor\r\n   * @param {Element} tab The HTML element for the tab.\r\n   * @param {MaterialTabs} ctx The MaterialTabs object that owns the tab.\r\n   */\r\nfunction MaterialTab(tab, ctx) {\r\n    if (tab) {\r\n        if (ctx.element_.classList.contains(ctx.CssClasses_.MDL_JS_RIPPLE_EFFECT)) {\r\n            var rippleContainer = document.createElement('span');\r\n            rippleContainer.classList.add(ctx.CssClasses_.MDL_RIPPLE_CONTAINER);\r\n            rippleContainer.classList.add(ctx.CssClasses_.MDL_JS_RIPPLE_EFFECT);\r\n            var ripple = document.createElement('span');\r\n            ripple.classList.add(ctx.CssClasses_.MDL_RIPPLE);\r\n            rippleContainer.appendChild(ripple);\r\n            tab.appendChild(rippleContainer);\r\n        }\r\n        tab.addEventListener('click', function (e) {\r\n            e.preventDefault();\r\n            var href = tab.href.split('#')[1];\r\n            var panel = ctx.element_.querySelector('#' + href);\r\n            ctx.resetTabState_();\r\n            ctx.resetPanelState_();\r\n            tab.classList.add(ctx.CssClasses_.ACTIVE_CLASS);\r\n            panel.classList.add(ctx.CssClasses_.ACTIVE_CLASS);\r\n        });\r\n    }\r\n}\r\n// The component registers itself. It can assume componentHandler is available\r\n// in the global scope.\r\ncomponentHandler.register({\r\n    constructor: MaterialTabs,\r\n    classAsString: 'MaterialTabs',\r\n    cssClass: 'mdl-js-tabs'\r\n});\r\n/**\r\n * @license\r\n * Copyright 2015 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n   * Class constructor for Textfield MDL component.\r\n   * Implements MDL component design pattern defined at:\r\n   * https://github.com/jasonmayes/mdl-component-design-pattern\r\n   *\r\n   * @constructor\r\n   * @param {HTMLElement} element The element that will be upgraded.\r\n   */\r\nvar MaterialTextfield = function MaterialTextfield(element) {\r\n    this.element_ = element;\r\n    this.maxRows = this.Constant_.NO_MAX_ROWS;\r\n    // Initialize instance.\r\n    this.init();\r\n};\r\nwindow['MaterialTextfield'] = MaterialTextfield;\r\n/**\r\n   * Store constants in one place so they can be updated easily.\r\n   *\r\n   * @enum {string | number}\r\n   * @private\r\n   */\r\nMaterialTextfield.prototype.Constant_ = {\r\n    NO_MAX_ROWS: -1,\r\n    MAX_ROWS_ATTRIBUTE: 'maxrows'\r\n};\r\n/**\r\n   * Store strings for class names defined by this component that are used in\r\n   * JavaScript. This allows us to simply change it in one place should we\r\n   * decide to modify at a later date.\r\n   *\r\n   * @enum {string}\r\n   * @private\r\n   */\r\nMaterialTextfield.prototype.CssClasses_ = {\r\n    LABEL: 'mdl-textfield__label',\r\n    INPUT: 'mdl-textfield__input',\r\n    IS_DIRTY: 'is-dirty',\r\n    IS_FOCUSED: 'is-focused',\r\n    IS_DISABLED: 'is-disabled',\r\n    IS_INVALID: 'is-invalid',\r\n    IS_UPGRADED: 'is-upgraded',\r\n    HAS_PLACEHOLDER: 'has-placeholder'\r\n};\r\n/**\r\n   * Handle input being entered.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\nMaterialTextfield.prototype.onKeyDown_ = function (event) {\r\n    var currentRowCount = event.target.value.split('\\n').length;\r\n    if (event.keyCode === 13) {\r\n        if (currentRowCount >= this.maxRows) {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n};\r\n/**\r\n   * Handle focus.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\nMaterialTextfield.prototype.onFocus_ = function (event) {\r\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\r\n};\r\n/**\r\n   * Handle lost focus.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\nMaterialTextfield.prototype.onBlur_ = function (event) {\r\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\r\n};\r\n/**\r\n   * Handle reset event from out side.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\nMaterialTextfield.prototype.onReset_ = function (event) {\r\n    this.updateClasses_();\r\n};\r\n/**\r\n   * Handle class updates.\r\n   *\r\n   * @private\r\n   */\r\nMaterialTextfield.prototype.updateClasses_ = function () {\r\n    this.checkDisabled();\r\n    this.checkValidity();\r\n    this.checkDirty();\r\n    this.checkFocus();\r\n};\r\n// Public methods.\r\n/**\r\n   * Check the disabled state and update field accordingly.\r\n   *\r\n   * @public\r\n   */\r\nMaterialTextfield.prototype.checkDisabled = function () {\r\n    if (this.input_.disabled) {\r\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);\r\n    } else {\r\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\r\n    }\r\n};\r\nMaterialTextfield.prototype['checkDisabled'] = MaterialTextfield.prototype.checkDisabled;\r\n/**\r\n  * Check the focus state and update field accordingly.\r\n  *\r\n  * @public\r\n  */\r\nMaterialTextfield.prototype.checkFocus = function () {\r\n    if (Boolean(this.element_.querySelector(':focus'))) {\r\n        this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\r\n    } else {\r\n        this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\r\n    }\r\n};\r\nMaterialTextfield.prototype['checkFocus'] = MaterialTextfield.prototype.checkFocus;\r\n/**\r\n   * Check the validity state and update field accordingly.\r\n   *\r\n   * @public\r\n   */\r\nMaterialTextfield.prototype.checkValidity = function () {\r\n    if (this.input_.validity) {\r\n        if (this.input_.validity.valid) {\r\n            this.element_.classList.remove(this.CssClasses_.IS_INVALID);\r\n        } else {\r\n            this.element_.classList.add(this.CssClasses_.IS_INVALID);\r\n        }\r\n    }\r\n};\r\nMaterialTextfield.prototype['checkValidity'] = MaterialTextfield.prototype.checkValidity;\r\n/**\r\n   * Check the dirty state and update field accordingly.\r\n   *\r\n   * @public\r\n   */\r\nMaterialTextfield.prototype.checkDirty = function () {\r\n    if (this.input_.value && this.input_.value.length > 0) {\r\n        this.element_.classList.add(this.CssClasses_.IS_DIRTY);\r\n    } else {\r\n        this.element_.classList.remove(this.CssClasses_.IS_DIRTY);\r\n    }\r\n};\r\nMaterialTextfield.prototype['checkDirty'] = MaterialTextfield.prototype.checkDirty;\r\n/**\r\n   * Disable text field.\r\n   *\r\n   * @public\r\n   */\r\nMaterialTextfield.prototype.disable = function () {\r\n    this.input_.disabled = true;\r\n    this.updateClasses_();\r\n};\r\nMaterialTextfield.prototype['disable'] = MaterialTextfield.prototype.disable;\r\n/**\r\n   * Enable text field.\r\n   *\r\n   * @public\r\n   */\r\nMaterialTextfield.prototype.enable = function () {\r\n    this.input_.disabled = false;\r\n    this.updateClasses_();\r\n};\r\nMaterialTextfield.prototype['enable'] = MaterialTextfield.prototype.enable;\r\n/**\r\n   * Update text field value.\r\n   *\r\n   * @param {string} value The value to which to set the control (optional).\r\n   * @public\r\n   */\r\nMaterialTextfield.prototype.change = function (value) {\r\n    this.input_.value = value || '';\r\n    this.updateClasses_();\r\n};\r\nMaterialTextfield.prototype['change'] = MaterialTextfield.prototype.change;\r\n/**\r\n   * Initialize element.\r\n   */\r\nMaterialTextfield.prototype.init = function () {\r\n    if (this.element_) {\r\n        this.label_ = this.element_.querySelector('.' + this.CssClasses_.LABEL);\r\n        this.input_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\r\n        if (this.input_) {\r\n            if (this.input_.hasAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE)) {\r\n                this.maxRows = parseInt(this.input_.getAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE), 10);\r\n                if (isNaN(this.maxRows)) {\r\n                    this.maxRows = this.Constant_.NO_MAX_ROWS;\r\n                }\r\n            }\r\n            if (this.input_.hasAttribute('placeholder')) {\r\n                this.element_.classList.add(this.CssClasses_.HAS_PLACEHOLDER);\r\n            }\r\n            this.boundUpdateClassesHandler = this.updateClasses_.bind(this);\r\n            this.boundFocusHandler = this.onFocus_.bind(this);\r\n            this.boundBlurHandler = this.onBlur_.bind(this);\r\n            this.boundResetHandler = this.onReset_.bind(this);\r\n            this.input_.addEventListener('input', this.boundUpdateClassesHandler);\r\n            this.input_.addEventListener('focus', this.boundFocusHandler);\r\n            this.input_.addEventListener('blur', this.boundBlurHandler);\r\n            this.input_.addEventListener('reset', this.boundResetHandler);\r\n            if (this.maxRows !== this.Constant_.NO_MAX_ROWS) {\r\n                // TODO: This should handle pasting multi line text.\r\n                // Currently doesn't.\r\n                this.boundKeyDownHandler = this.onKeyDown_.bind(this);\r\n                this.input_.addEventListener('keydown', this.boundKeyDownHandler);\r\n            }\r\n            var invalid = this.element_.classList.contains(this.CssClasses_.IS_INVALID);\r\n            this.updateClasses_();\r\n            this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\r\n            if (invalid) {\r\n                this.element_.classList.add(this.CssClasses_.IS_INVALID);\r\n            }\r\n            if (this.input_.hasAttribute('autofocus')) {\r\n                this.element_.focus();\r\n                this.checkFocus();\r\n            }\r\n        }\r\n    }\r\n};\r\n// The component registers itself. It can assume componentHandler is available\r\n// in the global scope.\r\ncomponentHandler.register({\r\n    constructor: MaterialTextfield,\r\n    classAsString: 'MaterialTextfield',\r\n    cssClass: 'mdl-js-textfield',\r\n    widget: true\r\n});\r\n/**\r\n * @license\r\n * Copyright 2015 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n   * Class constructor for Tooltip MDL component.\r\n   * Implements MDL component design pattern defined at:\r\n   * https://github.com/jasonmayes/mdl-component-design-pattern\r\n   *\r\n   * @constructor\r\n   * @param {HTMLElement} element The element that will be upgraded.\r\n   */\r\nvar MaterialTooltip = function MaterialTooltip(element) {\r\n    this.element_ = element;\r\n    // Initialize instance.\r\n    this.init();\r\n};\r\nwindow['MaterialTooltip'] = MaterialTooltip;\r\n/**\r\n   * Store constants in one place so they can be updated easily.\r\n   *\r\n   * @enum {string | number}\r\n   * @private\r\n   */\r\nMaterialTooltip.prototype.Constant_ = {};\r\n/**\r\n   * Store strings for class names defined by this component that are used in\r\n   * JavaScript. This allows us to simply change it in one place should we\r\n   * decide to modify at a later date.\r\n   *\r\n   * @enum {string}\r\n   * @private\r\n   */\r\nMaterialTooltip.prototype.CssClasses_ = {\r\n    IS_ACTIVE: 'is-active',\r\n    BOTTOM: 'mdl-tooltip--bottom',\r\n    LEFT: 'mdl-tooltip--left',\r\n    RIGHT: 'mdl-tooltip--right',\r\n    TOP: 'mdl-tooltip--top'\r\n};\r\n/**\r\n   * Handle mouseenter for tooltip.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\nMaterialTooltip.prototype.handleMouseEnter_ = function (event) {\r\n    var props = event.target.getBoundingClientRect();\r\n    var left = props.left + props.width / 2;\r\n    var top = props.top + props.height / 2;\r\n    var marginLeft = -1 * (this.element_.offsetWidth / 2);\r\n    var marginTop = -1 * (this.element_.offsetHeight / 2);\r\n    if (this.element_.classList.contains(this.CssClasses_.LEFT) || this.element_.classList.contains(this.CssClasses_.RIGHT)) {\r\n        left = props.width / 2;\r\n        if (top + marginTop < 0) {\r\n            this.element_.style.top = '0';\r\n            this.element_.style.marginTop = '0';\r\n        } else {\r\n            this.element_.style.top = top + 'px';\r\n            this.element_.style.marginTop = marginTop + 'px';\r\n        }\r\n    } else {\r\n        if (left + marginLeft < 0) {\r\n            this.element_.style.left = '0';\r\n            this.element_.style.marginLeft = '0';\r\n        } else {\r\n            this.element_.style.left = left + 'px';\r\n            this.element_.style.marginLeft = marginLeft + 'px';\r\n        }\r\n    }\r\n    if (this.element_.classList.contains(this.CssClasses_.TOP)) {\r\n        this.element_.style.top = props.top - this.element_.offsetHeight - 10 + 'px';\r\n    } else if (this.element_.classList.contains(this.CssClasses_.RIGHT)) {\r\n        this.element_.style.left = props.left + props.width + 10 + 'px';\r\n    } else if (this.element_.classList.contains(this.CssClasses_.LEFT)) {\r\n        this.element_.style.left = props.left - this.element_.offsetWidth - 10 + 'px';\r\n    } else {\r\n        this.element_.style.top = props.top + props.height + 10 + 'px';\r\n    }\r\n    this.element_.classList.add(this.CssClasses_.IS_ACTIVE);\r\n};\r\n/**\r\n   * Hide tooltip on mouseleave or scroll\r\n   *\r\n   * @private\r\n   */\r\nMaterialTooltip.prototype.hideTooltip_ = function () {\r\n    this.element_.classList.remove(this.CssClasses_.IS_ACTIVE);\r\n};\r\n/**\r\n   * Initialize element.\r\n   */\r\nMaterialTooltip.prototype.init = function () {\r\n    if (this.element_) {\r\n        var forElId = this.element_.getAttribute('for') || this.element_.getAttribute('data-mdl-for');\r\n        if (forElId) {\r\n            this.forElement_ = document.getElementById(forElId);\r\n        }\r\n        if (this.forElement_) {\r\n            // It's left here because it prevents accidental text selection on Android\r\n            if (!this.forElement_.hasAttribute('tabindex')) {\r\n                this.forElement_.setAttribute('tabindex', '0');\r\n            }\r\n            this.boundMouseEnterHandler = this.handleMouseEnter_.bind(this);\r\n            this.boundMouseLeaveAndScrollHandler = this.hideTooltip_.bind(this);\r\n            this.forElement_.addEventListener('mouseenter', this.boundMouseEnterHandler, false);\r\n            this.forElement_.addEventListener('touchend', this.boundMouseEnterHandler, false);\r\n            this.forElement_.addEventListener('mouseleave', this.boundMouseLeaveAndScrollHandler, false);\r\n            window.addEventListener('scroll', this.boundMouseLeaveAndScrollHandler, true);\r\n            window.addEventListener('touchstart', this.boundMouseLeaveAndScrollHandler);\r\n        }\r\n    }\r\n};\r\n// The component registers itself. It can assume componentHandler is available\r\n// in the global scope.\r\ncomponentHandler.register({\r\n    constructor: MaterialTooltip,\r\n    classAsString: 'MaterialTooltip',\r\n    cssClass: 'mdl-tooltip'\r\n});\r\n/**\r\n * @license\r\n * Copyright 2015 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n   * Class constructor for Layout MDL component.\r\n   * Implements MDL component design pattern defined at:\r\n   * https://github.com/jasonmayes/mdl-component-design-pattern\r\n   *\r\n   * @constructor\r\n   * @param {HTMLElement} element The element that will be upgraded.\r\n   */\r\nvar MaterialLayout = function MaterialLayout(element) {\r\n    this.element_ = element;\r\n    // Initialize instance.\r\n    this.init();\r\n};\r\nwindow['MaterialLayout'] = MaterialLayout;\r\n/**\r\n   * Store constants in one place so they can be updated easily.\r\n   *\r\n   * @enum {string | number}\r\n   * @private\r\n   */\r\nMaterialLayout.prototype.Constant_ = {\r\n    MAX_WIDTH: '(max-width: 1024px)',\r\n    TAB_SCROLL_PIXELS: 100,\r\n    RESIZE_TIMEOUT: 100,\r\n    MENU_ICON: '&#xE5D2;',\r\n    CHEVRON_LEFT: 'chevron_left',\r\n    CHEVRON_RIGHT: 'chevron_right'\r\n};\r\n/**\r\n   * Keycodes, for code readability.\r\n   *\r\n   * @enum {number}\r\n   * @private\r\n   */\r\nMaterialLayout.prototype.Keycodes_ = {\r\n    ENTER: 13,\r\n    ESCAPE: 27,\r\n    SPACE: 32\r\n};\r\n/**\r\n   * Modes.\r\n   *\r\n   * @enum {number}\r\n   * @private\r\n   */\r\nMaterialLayout.prototype.Mode_ = {\r\n    STANDARD: 0,\r\n    SEAMED: 1,\r\n    WATERFALL: 2,\r\n    SCROLL: 3\r\n};\r\n/**\r\n   * Store strings for class names defined by this component that are used in\r\n   * JavaScript. This allows us to simply change it in one place should we\r\n   * decide to modify at a later date.\r\n   *\r\n   * @enum {string}\r\n   * @private\r\n   */\r\nMaterialLayout.prototype.CssClasses_ = {\r\n    CONTAINER: 'mdl-layout__container',\r\n    HEADER: 'mdl-layout__header',\r\n    DRAWER: 'mdl-layout__drawer',\r\n    CONTENT: 'mdl-layout__content',\r\n    DRAWER_BTN: 'mdl-layout__drawer-button',\r\n    ICON: 'material-icons',\r\n    JS_RIPPLE_EFFECT: 'mdl-js-ripple-effect',\r\n    RIPPLE_CONTAINER: 'mdl-layout__tab-ripple-container',\r\n    RIPPLE: 'mdl-ripple',\r\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\r\n    HEADER_SEAMED: 'mdl-layout__header--seamed',\r\n    HEADER_WATERFALL: 'mdl-layout__header--waterfall',\r\n    HEADER_SCROLL: 'mdl-layout__header--scroll',\r\n    FIXED_HEADER: 'mdl-layout--fixed-header',\r\n    OBFUSCATOR: 'mdl-layout__obfuscator',\r\n    TAB_BAR: 'mdl-layout__tab-bar',\r\n    TAB_CONTAINER: 'mdl-layout__tab-bar-container',\r\n    TAB: 'mdl-layout__tab',\r\n    TAB_BAR_BUTTON: 'mdl-layout__tab-bar-button',\r\n    TAB_BAR_LEFT_BUTTON: 'mdl-layout__tab-bar-left-button',\r\n    TAB_BAR_RIGHT_BUTTON: 'mdl-layout__tab-bar-right-button',\r\n    PANEL: 'mdl-layout__tab-panel',\r\n    HAS_DRAWER: 'has-drawer',\r\n    HAS_TABS: 'has-tabs',\r\n    HAS_SCROLLING_HEADER: 'has-scrolling-header',\r\n    CASTING_SHADOW: 'is-casting-shadow',\r\n    IS_COMPACT: 'is-compact',\r\n    IS_SMALL_SCREEN: 'is-small-screen',\r\n    IS_DRAWER_OPEN: 'is-visible',\r\n    IS_ACTIVE: 'is-active',\r\n    IS_UPGRADED: 'is-upgraded',\r\n    IS_ANIMATING: 'is-animating',\r\n    ON_LARGE_SCREEN: 'mdl-layout--large-screen-only',\r\n    ON_SMALL_SCREEN: 'mdl-layout--small-screen-only'\r\n};\r\n/**\r\n   * Handles scrolling on the content.\r\n   *\r\n   * @private\r\n   */\r\nMaterialLayout.prototype.contentScrollHandler_ = function () {\r\n    if (this.header_.classList.contains(this.CssClasses_.IS_ANIMATING)) {\r\n        return;\r\n    }\r\n    var headerVisible = !this.element_.classList.contains(this.CssClasses_.IS_SMALL_SCREEN) || this.element_.classList.contains(this.CssClasses_.FIXED_HEADER);\r\n    if (this.content_.scrollTop > 0 && !this.header_.classList.contains(this.CssClasses_.IS_COMPACT)) {\r\n        this.header_.classList.add(this.CssClasses_.CASTING_SHADOW);\r\n        this.header_.classList.add(this.CssClasses_.IS_COMPACT);\r\n        if (headerVisible) {\r\n            this.header_.classList.add(this.CssClasses_.IS_ANIMATING);\r\n        }\r\n    } else if (this.content_.scrollTop <= 0 && this.header_.classList.contains(this.CssClasses_.IS_COMPACT)) {\r\n        this.header_.classList.remove(this.CssClasses_.CASTING_SHADOW);\r\n        this.header_.classList.remove(this.CssClasses_.IS_COMPACT);\r\n        if (headerVisible) {\r\n            this.header_.classList.add(this.CssClasses_.IS_ANIMATING);\r\n        }\r\n    }\r\n};\r\n/**\r\n   * Handles a keyboard event on the drawer.\r\n   *\r\n   * @param {Event} evt The event that fired.\r\n   * @private\r\n   */\r\nMaterialLayout.prototype.keyboardEventHandler_ = function (evt) {\r\n    // Only react when the drawer is open.\r\n    if (evt.keyCode === this.Keycodes_.ESCAPE && this.drawer_.classList.contains(this.CssClasses_.IS_DRAWER_OPEN)) {\r\n        this.toggleDrawer();\r\n    }\r\n};\r\n/**\r\n   * Handles changes in screen size.\r\n   *\r\n   * @private\r\n   */\r\nMaterialLayout.prototype.screenSizeHandler_ = function () {\r\n    if (this.screenSizeMediaQuery_.matches) {\r\n        this.element_.classList.add(this.CssClasses_.IS_SMALL_SCREEN);\r\n    } else {\r\n        this.element_.classList.remove(this.CssClasses_.IS_SMALL_SCREEN);\r\n        // Collapse drawer (if any) when moving to a large screen size.\r\n        if (this.drawer_) {\r\n            this.drawer_.classList.remove(this.CssClasses_.IS_DRAWER_OPEN);\r\n            this.obfuscator_.classList.remove(this.CssClasses_.IS_DRAWER_OPEN);\r\n        }\r\n    }\r\n};\r\n/**\r\n   * Handles events of drawer button.\r\n   *\r\n   * @param {Event} evt The event that fired.\r\n   * @private\r\n   */\r\nMaterialLayout.prototype.drawerToggleHandler_ = function (evt) {\r\n    if (evt && evt.type === 'keydown') {\r\n        if (evt.keyCode === this.Keycodes_.SPACE || evt.keyCode === this.Keycodes_.ENTER) {\r\n            // prevent scrolling in drawer nav\r\n            evt.preventDefault();\r\n        } else {\r\n            // prevent other keys\r\n            return;\r\n        }\r\n    }\r\n    this.toggleDrawer();\r\n};\r\n/**\r\n   * Handles (un)setting the `is-animating` class\r\n   *\r\n   * @private\r\n   */\r\nMaterialLayout.prototype.headerTransitionEndHandler_ = function () {\r\n    this.header_.classList.remove(this.CssClasses_.IS_ANIMATING);\r\n};\r\n/**\r\n   * Handles expanding the header on click\r\n   *\r\n   * @private\r\n   */\r\nMaterialLayout.prototype.headerClickHandler_ = function () {\r\n    if (this.header_.classList.contains(this.CssClasses_.IS_COMPACT)) {\r\n        this.header_.classList.remove(this.CssClasses_.IS_COMPACT);\r\n        this.header_.classList.add(this.CssClasses_.IS_ANIMATING);\r\n    }\r\n};\r\n/**\r\n   * Reset tab state, dropping active classes\r\n   *\r\n   * @private\r\n   */\r\nMaterialLayout.prototype.resetTabState_ = function (tabBar) {\r\n    for (var k = 0; k < tabBar.length; k++) {\r\n        tabBar[k].classList.remove(this.CssClasses_.IS_ACTIVE);\r\n    }\r\n};\r\n/**\r\n   * Reset panel state, droping active classes\r\n   *\r\n   * @private\r\n   */\r\nMaterialLayout.prototype.resetPanelState_ = function (panels) {\r\n    for (var j = 0; j < panels.length; j++) {\r\n        panels[j].classList.remove(this.CssClasses_.IS_ACTIVE);\r\n    }\r\n};\r\n/**\r\n  * Toggle drawer state\r\n  *\r\n  * @public\r\n  */\r\nMaterialLayout.prototype.toggleDrawer = function () {\r\n    var drawerButton = this.element_.querySelector('.' + this.CssClasses_.DRAWER_BTN);\r\n    this.drawer_.classList.toggle(this.CssClasses_.IS_DRAWER_OPEN);\r\n    this.obfuscator_.classList.toggle(this.CssClasses_.IS_DRAWER_OPEN);\r\n    // Set accessibility properties.\r\n    if (this.drawer_.classList.contains(this.CssClasses_.IS_DRAWER_OPEN)) {\r\n        this.drawer_.setAttribute('aria-hidden', 'false');\r\n        drawerButton.setAttribute('aria-expanded', 'true');\r\n    } else {\r\n        this.drawer_.setAttribute('aria-hidden', 'true');\r\n        drawerButton.setAttribute('aria-expanded', 'false');\r\n    }\r\n};\r\nMaterialLayout.prototype['toggleDrawer'] = MaterialLayout.prototype.toggleDrawer;\r\n/**\r\n   * Initialize element.\r\n   */\r\nMaterialLayout.prototype.init = function () {\r\n    if (this.element_) {\r\n        var container = document.createElement('div');\r\n        container.classList.add(this.CssClasses_.CONTAINER);\r\n        var focusedElement = this.element_.querySelector(':focus');\r\n        this.element_.parentElement.insertBefore(container, this.element_);\r\n        this.element_.parentElement.removeChild(this.element_);\r\n        container.appendChild(this.element_);\r\n        if (focusedElement) {\r\n            focusedElement.focus();\r\n        }\r\n        var directChildren = this.element_.childNodes;\r\n        var numChildren = directChildren.length;\r\n        for (var c = 0; c < numChildren; c++) {\r\n            var child = directChildren[c];\r\n            if (child.classList && child.classList.contains(this.CssClasses_.HEADER)) {\r\n                this.header_ = child;\r\n            }\r\n            if (child.classList && child.classList.contains(this.CssClasses_.DRAWER)) {\r\n                this.drawer_ = child;\r\n            }\r\n            if (child.classList && child.classList.contains(this.CssClasses_.CONTENT)) {\r\n                this.content_ = child;\r\n            }\r\n        }\r\n        window.addEventListener('pageshow', function (e) {\r\n            if (e.persisted) {\r\n                // when page is loaded from back/forward cache\r\n                // trigger repaint to let layout scroll in safari\r\n                this.element_.style.overflowY = 'hidden';\r\n                requestAnimationFrame(function () {\r\n                    this.element_.style.overflowY = '';\r\n                }.bind(this));\r\n            }\r\n        }.bind(this), false);\r\n        if (this.header_) {\r\n            this.tabBar_ = this.header_.querySelector('.' + this.CssClasses_.TAB_BAR);\r\n        }\r\n        var mode = this.Mode_.STANDARD;\r\n        if (this.header_) {\r\n            if (this.header_.classList.contains(this.CssClasses_.HEADER_SEAMED)) {\r\n                mode = this.Mode_.SEAMED;\r\n            } else if (this.header_.classList.contains(this.CssClasses_.HEADER_WATERFALL)) {\r\n                mode = this.Mode_.WATERFALL;\r\n                this.header_.addEventListener('transitionend', this.headerTransitionEndHandler_.bind(this));\r\n                this.header_.addEventListener('click', this.headerClickHandler_.bind(this));\r\n            } else if (this.header_.classList.contains(this.CssClasses_.HEADER_SCROLL)) {\r\n                mode = this.Mode_.SCROLL;\r\n                container.classList.add(this.CssClasses_.HAS_SCROLLING_HEADER);\r\n            }\r\n            if (mode === this.Mode_.STANDARD) {\r\n                this.header_.classList.add(this.CssClasses_.CASTING_SHADOW);\r\n                if (this.tabBar_) {\r\n                    this.tabBar_.classList.add(this.CssClasses_.CASTING_SHADOW);\r\n                }\r\n            } else if (mode === this.Mode_.SEAMED || mode === this.Mode_.SCROLL) {\r\n                this.header_.classList.remove(this.CssClasses_.CASTING_SHADOW);\r\n                if (this.tabBar_) {\r\n                    this.tabBar_.classList.remove(this.CssClasses_.CASTING_SHADOW);\r\n                }\r\n            } else if (mode === this.Mode_.WATERFALL) {\r\n                // Add and remove shadows depending on scroll position.\r\n                // Also add/remove auxiliary class for styling of the compact version of\r\n                // the header.\r\n                this.content_.addEventListener('scroll', this.contentScrollHandler_.bind(this));\r\n                this.contentScrollHandler_();\r\n            }\r\n        }\r\n        // Add drawer toggling button to our layout, if we have an openable drawer.\r\n        if (this.drawer_) {\r\n            var drawerButton = this.element_.querySelector('.' + this.CssClasses_.DRAWER_BTN);\r\n            if (!drawerButton) {\r\n                drawerButton = document.createElement('div');\r\n                drawerButton.setAttribute('aria-expanded', 'false');\r\n                drawerButton.setAttribute('role', 'button');\r\n                drawerButton.setAttribute('tabindex', '0');\r\n                drawerButton.classList.add(this.CssClasses_.DRAWER_BTN);\r\n                var drawerButtonIcon = document.createElement('i');\r\n                drawerButtonIcon.classList.add(this.CssClasses_.ICON);\r\n                drawerButtonIcon.innerHTML = this.Constant_.MENU_ICON;\r\n                drawerButton.appendChild(drawerButtonIcon);\r\n            }\r\n            if (this.drawer_.classList.contains(this.CssClasses_.ON_LARGE_SCREEN)) {\r\n                //If drawer has ON_LARGE_SCREEN class then add it to the drawer toggle button as well.\r\n                drawerButton.classList.add(this.CssClasses_.ON_LARGE_SCREEN);\r\n            } else if (this.drawer_.classList.contains(this.CssClasses_.ON_SMALL_SCREEN)) {\r\n                //If drawer has ON_SMALL_SCREEN class then add it to the drawer toggle button as well.\r\n                drawerButton.classList.add(this.CssClasses_.ON_SMALL_SCREEN);\r\n            }\r\n            drawerButton.addEventListener('click', this.drawerToggleHandler_.bind(this));\r\n            drawerButton.addEventListener('keydown', this.drawerToggleHandler_.bind(this));\r\n            // Add a class if the layout has a drawer, for altering the left padding.\r\n            // Adds the HAS_DRAWER to the elements since this.header_ may or may\r\n            // not be present.\r\n            this.element_.classList.add(this.CssClasses_.HAS_DRAWER);\r\n            // If we have a fixed header, add the button to the header rather than\r\n            // the layout.\r\n            if (this.element_.classList.contains(this.CssClasses_.FIXED_HEADER)) {\r\n                this.header_.insertBefore(drawerButton, this.header_.firstChild);\r\n            } else {\r\n                this.element_.insertBefore(drawerButton, this.content_);\r\n            }\r\n            var obfuscator = document.createElement('div');\r\n            obfuscator.classList.add(this.CssClasses_.OBFUSCATOR);\r\n            this.element_.appendChild(obfuscator);\r\n            obfuscator.addEventListener('click', this.drawerToggleHandler_.bind(this));\r\n            this.obfuscator_ = obfuscator;\r\n            this.drawer_.addEventListener('keydown', this.keyboardEventHandler_.bind(this));\r\n            this.drawer_.setAttribute('aria-hidden', 'true');\r\n        }\r\n        // Keep an eye on screen size, and add/remove auxiliary class for styling\r\n        // of small screens.\r\n        this.screenSizeMediaQuery_ = window.matchMedia(this.Constant_.MAX_WIDTH);\r\n        this.screenSizeMediaQuery_.addListener(this.screenSizeHandler_.bind(this));\r\n        this.screenSizeHandler_();\r\n        // Initialize tabs, if any.\r\n        if (this.header_ && this.tabBar_) {\r\n            this.element_.classList.add(this.CssClasses_.HAS_TABS);\r\n            var tabContainer = document.createElement('div');\r\n            tabContainer.classList.add(this.CssClasses_.TAB_CONTAINER);\r\n            this.header_.insertBefore(tabContainer, this.tabBar_);\r\n            this.header_.removeChild(this.tabBar_);\r\n            var leftButton = document.createElement('div');\r\n            leftButton.classList.add(this.CssClasses_.TAB_BAR_BUTTON);\r\n            leftButton.classList.add(this.CssClasses_.TAB_BAR_LEFT_BUTTON);\r\n            var leftButtonIcon = document.createElement('i');\r\n            leftButtonIcon.classList.add(this.CssClasses_.ICON);\r\n            leftButtonIcon.textContent = this.Constant_.CHEVRON_LEFT;\r\n            leftButton.appendChild(leftButtonIcon);\r\n            leftButton.addEventListener('click', function () {\r\n                this.tabBar_.scrollLeft -= this.Constant_.TAB_SCROLL_PIXELS;\r\n            }.bind(this));\r\n            var rightButton = document.createElement('div');\r\n            rightButton.classList.add(this.CssClasses_.TAB_BAR_BUTTON);\r\n            rightButton.classList.add(this.CssClasses_.TAB_BAR_RIGHT_BUTTON);\r\n            var rightButtonIcon = document.createElement('i');\r\n            rightButtonIcon.classList.add(this.CssClasses_.ICON);\r\n            rightButtonIcon.textContent = this.Constant_.CHEVRON_RIGHT;\r\n            rightButton.appendChild(rightButtonIcon);\r\n            rightButton.addEventListener('click', function () {\r\n                this.tabBar_.scrollLeft += this.Constant_.TAB_SCROLL_PIXELS;\r\n            }.bind(this));\r\n            tabContainer.appendChild(leftButton);\r\n            tabContainer.appendChild(this.tabBar_);\r\n            tabContainer.appendChild(rightButton);\r\n            // Add and remove tab buttons depending on scroll position and total\r\n            // window size.\r\n            var tabUpdateHandler = function () {\r\n                if (this.tabBar_.scrollLeft > 0) {\r\n                    leftButton.classList.add(this.CssClasses_.IS_ACTIVE);\r\n                } else {\r\n                    leftButton.classList.remove(this.CssClasses_.IS_ACTIVE);\r\n                }\r\n                if (this.tabBar_.scrollLeft < this.tabBar_.scrollWidth - this.tabBar_.offsetWidth) {\r\n                    rightButton.classList.add(this.CssClasses_.IS_ACTIVE);\r\n                } else {\r\n                    rightButton.classList.remove(this.CssClasses_.IS_ACTIVE);\r\n                }\r\n            }.bind(this);\r\n            this.tabBar_.addEventListener('scroll', tabUpdateHandler);\r\n            tabUpdateHandler();\r\n            // Update tabs when the window resizes.\r\n            var windowResizeHandler = function () {\r\n                // Use timeouts to make sure it doesn't happen too often.\r\n                if (this.resizeTimeoutId_) {\r\n                    clearTimeout(this.resizeTimeoutId_);\r\n                }\r\n                this.resizeTimeoutId_ = setTimeout(function () {\r\n                    tabUpdateHandler();\r\n                    this.resizeTimeoutId_ = null;\r\n                }.bind(this), this.Constant_.RESIZE_TIMEOUT);\r\n            }.bind(this);\r\n            window.addEventListener('resize', windowResizeHandler);\r\n            if (this.tabBar_.classList.contains(this.CssClasses_.JS_RIPPLE_EFFECT)) {\r\n                this.tabBar_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\r\n            }\r\n            // Select element tabs, document panels\r\n            var tabs = this.tabBar_.querySelectorAll('.' + this.CssClasses_.TAB);\r\n            var panels = this.content_.querySelectorAll('.' + this.CssClasses_.PANEL);\r\n            // Create new tabs for each tab element\r\n            for (var i = 0; i < tabs.length; i++) {\r\n                new MaterialLayoutTab(tabs[i], tabs, panels, this);\r\n            }\r\n        }\r\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\r\n    }\r\n};\r\n/**\r\n   * Constructor for an individual tab.\r\n   *\r\n   * @constructor\r\n   * @param {HTMLElement} tab The HTML element for the tab.\r\n   * @param {!Array<HTMLElement>} tabs Array with HTML elements for all tabs.\r\n   * @param {!Array<HTMLElement>} panels Array with HTML elements for all panels.\r\n   * @param {MaterialLayout} layout The MaterialLayout object that owns the tab.\r\n   */\r\nfunction MaterialLayoutTab(tab, tabs, panels, layout) {\r\n    /**\r\n     * Auxiliary method to programmatically select a tab in the UI.\r\n     */\r\n    function selectTab() {\r\n        var href = tab.href.split('#')[1];\r\n        var panel = layout.content_.querySelector('#' + href);\r\n        layout.resetTabState_(tabs);\r\n        layout.resetPanelState_(panels);\r\n        tab.classList.add(layout.CssClasses_.IS_ACTIVE);\r\n        panel.classList.add(layout.CssClasses_.IS_ACTIVE);\r\n    }\r\n    if (layout.tabBar_.classList.contains(layout.CssClasses_.JS_RIPPLE_EFFECT)) {\r\n        var rippleContainer = document.createElement('span');\r\n        rippleContainer.classList.add(layout.CssClasses_.RIPPLE_CONTAINER);\r\n        rippleContainer.classList.add(layout.CssClasses_.JS_RIPPLE_EFFECT);\r\n        var ripple = document.createElement('span');\r\n        ripple.classList.add(layout.CssClasses_.RIPPLE);\r\n        rippleContainer.appendChild(ripple);\r\n        tab.appendChild(rippleContainer);\r\n    }\r\n    tab.addEventListener('click', function (e) {\r\n        if (tab.getAttribute('href').charAt(0) === '#') {\r\n            e.preventDefault();\r\n            selectTab();\r\n        }\r\n    });\r\n    tab.show = selectTab;\r\n}\r\nwindow['MaterialLayoutTab'] = MaterialLayoutTab;\r\n// The component registers itself. It can assume componentHandler is available\r\n// in the global scope.\r\ncomponentHandler.register({\r\n    constructor: MaterialLayout,\r\n    classAsString: 'MaterialLayout',\r\n    cssClass: 'mdl-js-layout'\r\n});\r\n/**\r\n * @license\r\n * Copyright 2015 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n   * Class constructor for Data Table Card MDL component.\r\n   * Implements MDL component design pattern defined at:\r\n   * https://github.com/jasonmayes/mdl-component-design-pattern\r\n   *\r\n   * @constructor\r\n   * @param {Element} element The element that will be upgraded.\r\n   */\r\nvar MaterialDataTable = function MaterialDataTable(element) {\r\n    this.element_ = element;\r\n    // Initialize instance.\r\n    this.init();\r\n};\r\nwindow['MaterialDataTable'] = MaterialDataTable;\r\n/**\r\n   * Store constants in one place so they can be updated easily.\r\n   *\r\n   * @enum {string | number}\r\n   * @private\r\n   */\r\nMaterialDataTable.prototype.Constant_ = {};\r\n/**\r\n   * Store strings for class names defined by this component that are used in\r\n   * JavaScript. This allows us to simply change it in one place should we\r\n   * decide to modify at a later date.\r\n   *\r\n   * @enum {string}\r\n   * @private\r\n   */\r\nMaterialDataTable.prototype.CssClasses_ = {\r\n    DATA_TABLE: 'mdl-data-table',\r\n    SELECTABLE: 'mdl-data-table--selectable',\r\n    SELECT_ELEMENT: 'mdl-data-table__select',\r\n    IS_SELECTED: 'is-selected',\r\n    IS_UPGRADED: 'is-upgraded'\r\n};\r\n/**\r\n   * Generates and returns a function that toggles the selection state of a\r\n   * single row (or multiple rows).\r\n   *\r\n   * @param {Element} checkbox Checkbox that toggles the selection state.\r\n   * @param {Element} row Row to toggle when checkbox changes.\r\n   * @param {(Array<Object>|NodeList)=} opt_rows Rows to toggle when checkbox changes.\r\n   * @private\r\n   */\r\nMaterialDataTable.prototype.selectRow_ = function (checkbox, row, opt_rows) {\r\n    if (row) {\r\n        return function () {\r\n            if (checkbox.checked) {\r\n                row.classList.add(this.CssClasses_.IS_SELECTED);\r\n            } else {\r\n                row.classList.remove(this.CssClasses_.IS_SELECTED);\r\n            }\r\n        }.bind(this);\r\n    }\r\n    if (opt_rows) {\r\n        return function () {\r\n            var i;\r\n            var el;\r\n            if (checkbox.checked) {\r\n                for (i = 0; i < opt_rows.length; i++) {\r\n                    el = opt_rows[i].querySelector('td').querySelector('.mdl-checkbox');\r\n                    el['MaterialCheckbox'].check();\r\n                    opt_rows[i].classList.add(this.CssClasses_.IS_SELECTED);\r\n                }\r\n            } else {\r\n                for (i = 0; i < opt_rows.length; i++) {\r\n                    el = opt_rows[i].querySelector('td').querySelector('.mdl-checkbox');\r\n                    el['MaterialCheckbox'].uncheck();\r\n                    opt_rows[i].classList.remove(this.CssClasses_.IS_SELECTED);\r\n                }\r\n            }\r\n        }.bind(this);\r\n    }\r\n};\r\n/**\r\n   * Creates a checkbox for a single or or multiple rows and hooks up the\r\n   * event handling.\r\n   *\r\n   * @param {Element} row Row to toggle when checkbox changes.\r\n   * @param {(Array<Object>|NodeList)=} opt_rows Rows to toggle when checkbox changes.\r\n   * @private\r\n   */\r\nMaterialDataTable.prototype.createCheckbox_ = function (row, opt_rows) {\r\n    var label = document.createElement('label');\r\n    var labelClasses = [\r\n        'mdl-checkbox',\r\n        'mdl-js-checkbox',\r\n        'mdl-js-ripple-effect',\r\n        this.CssClasses_.SELECT_ELEMENT\r\n    ];\r\n    label.className = labelClasses.join(' ');\r\n    var checkbox = document.createElement('input');\r\n    checkbox.type = 'checkbox';\r\n    checkbox.classList.add('mdl-checkbox__input');\r\n    if (row) {\r\n        checkbox.checked = row.classList.contains(this.CssClasses_.IS_SELECTED);\r\n        checkbox.addEventListener('change', this.selectRow_(checkbox, row));\r\n    } else if (opt_rows) {\r\n        checkbox.addEventListener('change', this.selectRow_(checkbox, null, opt_rows));\r\n    }\r\n    label.appendChild(checkbox);\r\n    componentHandler.upgradeElement(label, 'MaterialCheckbox');\r\n    return label;\r\n};\r\n/**\r\n   * Initialize element.\r\n   */\r\nMaterialDataTable.prototype.init = function () {\r\n    if (this.element_) {\r\n        var firstHeader = this.element_.querySelector('th');\r\n        var bodyRows = Array.prototype.slice.call(this.element_.querySelectorAll('tbody tr'));\r\n        var footRows = Array.prototype.slice.call(this.element_.querySelectorAll('tfoot tr'));\r\n        var rows = bodyRows.concat(footRows);\r\n        if (this.element_.classList.contains(this.CssClasses_.SELECTABLE)) {\r\n            var th = document.createElement('th');\r\n            var headerCheckbox = this.createCheckbox_(null, rows);\r\n            th.appendChild(headerCheckbox);\r\n            firstHeader.parentElement.insertBefore(th, firstHeader);\r\n            for (var i = 0; i < rows.length; i++) {\r\n                var firstCell = rows[i].querySelector('td');\r\n                if (firstCell) {\r\n                    var td = document.createElement('td');\r\n                    if (rows[i].parentNode.nodeName.toUpperCase() === 'TBODY') {\r\n                        var rowCheckbox = this.createCheckbox_(rows[i]);\r\n                        td.appendChild(rowCheckbox);\r\n                    }\r\n                    rows[i].insertBefore(td, firstCell);\r\n                }\r\n            }\r\n            this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\r\n        }\r\n    }\r\n};\r\n// The component registers itself. It can assume componentHandler is available\r\n// in the global scope.\r\ncomponentHandler.register({\r\n    constructor: MaterialDataTable,\r\n    classAsString: 'MaterialDataTable',\r\n    cssClass: 'mdl-js-data-table'\r\n});\r\n/**\r\n * @license\r\n * Copyright 2015 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n   * Class constructor for Ripple MDL component.\r\n   * Implements MDL component design pattern defined at:\r\n   * https://github.com/jasonmayes/mdl-component-design-pattern\r\n   *\r\n   * @constructor\r\n   * @param {HTMLElement} element The element that will be upgraded.\r\n   */\r\nvar MaterialRipple = function MaterialRipple(element) {\r\n    this.element_ = element;\r\n    // Initialize instance.\r\n    this.init();\r\n};\r\nwindow['MaterialRipple'] = MaterialRipple;\r\n/**\r\n   * Store constants in one place so they can be updated easily.\r\n   *\r\n   * @enum {string | number}\r\n   * @private\r\n   */\r\nMaterialRipple.prototype.Constant_ = {\r\n    INITIAL_SCALE: 'scale(0.0001, 0.0001)',\r\n    INITIAL_SIZE: '1px',\r\n    INITIAL_OPACITY: '0.4',\r\n    FINAL_OPACITY: '0',\r\n    FINAL_SCALE: ''\r\n};\r\n/**\r\n   * Store strings for class names defined by this component that are used in\r\n   * JavaScript. This allows us to simply change it in one place should we\r\n   * decide to modify at a later date.\r\n   *\r\n   * @enum {string}\r\n   * @private\r\n   */\r\nMaterialRipple.prototype.CssClasses_ = {\r\n    RIPPLE_CENTER: 'mdl-ripple--center',\r\n    RIPPLE_EFFECT_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\r\n    RIPPLE: 'mdl-ripple',\r\n    IS_ANIMATING: 'is-animating',\r\n    IS_VISIBLE: 'is-visible'\r\n};\r\n/**\r\n   * Handle mouse / finger down on element.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\nMaterialRipple.prototype.downHandler_ = function (event) {\r\n    if (!this.rippleElement_.style.width && !this.rippleElement_.style.height) {\r\n        var rect = this.element_.getBoundingClientRect();\r\n        this.boundHeight = rect.height;\r\n        this.boundWidth = rect.width;\r\n        this.rippleSize_ = Math.sqrt(rect.width * rect.width + rect.height * rect.height) * 2 + 2;\r\n        this.rippleElement_.style.width = this.rippleSize_ + 'px';\r\n        this.rippleElement_.style.height = this.rippleSize_ + 'px';\r\n    }\r\n    this.rippleElement_.classList.add(this.CssClasses_.IS_VISIBLE);\r\n    if (event.type === 'mousedown' && this.ignoringMouseDown_) {\r\n        this.ignoringMouseDown_ = false;\r\n    } else {\r\n        if (event.type === 'touchstart') {\r\n            this.ignoringMouseDown_ = true;\r\n        }\r\n        var frameCount = this.getFrameCount();\r\n        if (frameCount > 0) {\r\n            return;\r\n        }\r\n        this.setFrameCount(1);\r\n        var bound = event.currentTarget.getBoundingClientRect();\r\n        var x;\r\n        var y;\r\n        // Check if we are handling a keyboard click.\r\n        if (event.clientX === 0 && event.clientY === 0) {\r\n            x = Math.round(bound.width / 2);\r\n            y = Math.round(bound.height / 2);\r\n        } else {\r\n            var clientX = event.clientX ? event.clientX : event.touches[0].clientX;\r\n            var clientY = event.clientY ? event.clientY : event.touches[0].clientY;\r\n            x = Math.round(clientX - bound.left);\r\n            y = Math.round(clientY - bound.top);\r\n        }\r\n        this.setRippleXY(x, y);\r\n        this.setRippleStyles(true);\r\n        window.requestAnimationFrame(this.animFrameHandler.bind(this));\r\n    }\r\n};\r\n/**\r\n   * Handle mouse / finger up on element.\r\n   *\r\n   * @param {Event} event The event that fired.\r\n   * @private\r\n   */\r\nMaterialRipple.prototype.upHandler_ = function (event) {\r\n    // Don't fire for the artificial \"mouseup\" generated by a double-click.\r\n    if (event && event.detail !== 2) {\r\n        // Allow a repaint to occur before removing this class, so the animation\r\n        // shows for tap events, which seem to trigger a mouseup too soon after\r\n        // mousedown.\r\n        window.setTimeout(function () {\r\n            this.rippleElement_.classList.remove(this.CssClasses_.IS_VISIBLE);\r\n        }.bind(this), 0);\r\n    }\r\n};\r\n/**\r\n   * Initialize element.\r\n   */\r\nMaterialRipple.prototype.init = function () {\r\n    if (this.element_) {\r\n        var recentering = this.element_.classList.contains(this.CssClasses_.RIPPLE_CENTER);\r\n        if (!this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT_IGNORE_EVENTS)) {\r\n            this.rippleElement_ = this.element_.querySelector('.' + this.CssClasses_.RIPPLE);\r\n            this.frameCount_ = 0;\r\n            this.rippleSize_ = 0;\r\n            this.x_ = 0;\r\n            this.y_ = 0;\r\n            // Touch start produces a compat mouse down event, which would cause a\r\n            // second ripples. To avoid that, we use this property to ignore the first\r\n            // mouse down after a touch start.\r\n            this.ignoringMouseDown_ = false;\r\n            this.boundDownHandler = this.downHandler_.bind(this);\r\n            this.element_.addEventListener('mousedown', this.boundDownHandler);\r\n            this.element_.addEventListener('touchstart', this.boundDownHandler);\r\n            this.boundUpHandler = this.upHandler_.bind(this);\r\n            this.element_.addEventListener('mouseup', this.boundUpHandler);\r\n            this.element_.addEventListener('mouseleave', this.boundUpHandler);\r\n            this.element_.addEventListener('touchend', this.boundUpHandler);\r\n            this.element_.addEventListener('blur', this.boundUpHandler);\r\n            /**\r\n         * Getter for frameCount_.\r\n         * @return {number} the frame count.\r\n         */\r\n            this.getFrameCount = function () {\r\n                return this.frameCount_;\r\n            };\r\n            /**\r\n         * Setter for frameCount_.\r\n         * @param {number} fC the frame count.\r\n         */\r\n            this.setFrameCount = function (fC) {\r\n                this.frameCount_ = fC;\r\n            };\r\n            /**\r\n         * Getter for rippleElement_.\r\n         * @return {Element} the ripple element.\r\n         */\r\n            this.getRippleElement = function () {\r\n                return this.rippleElement_;\r\n            };\r\n            /**\r\n         * Sets the ripple X and Y coordinates.\r\n         * @param  {number} newX the new X coordinate\r\n         * @param  {number} newY the new Y coordinate\r\n         */\r\n            this.setRippleXY = function (newX, newY) {\r\n                this.x_ = newX;\r\n                this.y_ = newY;\r\n            };\r\n            /**\r\n         * Sets the ripple styles.\r\n         * @param  {boolean} start whether or not this is the start frame.\r\n         */\r\n            this.setRippleStyles = function (start) {\r\n                if (this.rippleElement_ !== null) {\r\n                    var transformString;\r\n                    var scale;\r\n                    var size;\r\n                    var offset = 'translate(' + this.x_ + 'px, ' + this.y_ + 'px)';\r\n                    if (start) {\r\n                        scale = this.Constant_.INITIAL_SCALE;\r\n                        size = this.Constant_.INITIAL_SIZE;\r\n                    } else {\r\n                        scale = this.Constant_.FINAL_SCALE;\r\n                        size = this.rippleSize_ + 'px';\r\n                        if (recentering) {\r\n                            offset = 'translate(' + this.boundWidth / 2 + 'px, ' + this.boundHeight / 2 + 'px)';\r\n                        }\r\n                    }\r\n                    transformString = 'translate(-50%, -50%) ' + offset + scale;\r\n                    this.rippleElement_.style.webkitTransform = transformString;\r\n                    this.rippleElement_.style.msTransform = transformString;\r\n                    this.rippleElement_.style.transform = transformString;\r\n                    if (start) {\r\n                        this.rippleElement_.classList.remove(this.CssClasses_.IS_ANIMATING);\r\n                    } else {\r\n                        this.rippleElement_.classList.add(this.CssClasses_.IS_ANIMATING);\r\n                    }\r\n                }\r\n            };\r\n            /**\r\n         * Handles an animation frame.\r\n         */\r\n            this.animFrameHandler = function () {\r\n                if (this.frameCount_-- > 0) {\r\n                    window.requestAnimationFrame(this.animFrameHandler.bind(this));\r\n                } else {\r\n                    this.setRippleStyles(false);\r\n                }\r\n            };\r\n        }\r\n    }\r\n};\r\n// The component registers itself. It can assume componentHandler is available\r\n// in the global scope.\r\ncomponentHandler.register({\r\n    constructor: MaterialRipple,\r\n    classAsString: 'MaterialRipple',\r\n    cssClass: 'mdl-js-ripple-effect',\r\n    widget: false\r\n});\r\n}());"],"file":"vendor.js","sourceRoot":"/source/"}